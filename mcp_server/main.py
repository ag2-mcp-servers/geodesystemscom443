# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:31:58+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Query

app = MCPProxy(
    description='Search for data in lots of places - manage your documents, photos and critical business knowledge - communicate and coordinate with blogs, interactive wikis, and data integration dashboards.',
    title='geodesystems.com:443',
    version='1.0.0',
    servers=[{'url': 'https://geodesystems.com:443/'}],
)


@app.get(
    '/repository/entry/show',
    description=""" API to call: Extract sheets """,
    tags=['data_extraction', 'general_api_search'],
)
def media_tabular_extractsheet(
    output: str = 'media_tabular_extractsheet',
    entryid: str = ...,
    arg1: Optional[str] = None,
):
    """
    API for Extract sheets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/2017_boulder_election_expenditures',
    description=""" API to search for entries of type 2017 Boulder Election Expenditures """,
    tags=[
        'data_extraction',
        'boulder_elections_data_search',
        'candidates_financial_data_search',
    ],
)
def search_2017_boulder_election_expenditures(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_2017_boulder_election_expenditures_committee: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.committee'
    ),
    search_db_2017_boulder_election_expenditures_transaction_date: Optional[
        str
    ] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.transaction_date'
    ),
    search_db_2017_boulder_election_expenditures_name: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.name'
    ),
    search_db_2017_boulder_election_expenditures_street: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.street'
    ),
    search_db_2017_boulder_election_expenditures_city: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.city'
    ),
    search_db_2017_boulder_election_expenditures_state: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.state'
    ),
    search_db_2017_boulder_election_expenditures_zip: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.zip'
    ),
    search_db_2017_boulder_election_expenditures_expenditure: Optional[float] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.expenditure'
    ),
    search_db_2017_boulder_election_expenditures_purpose: Optional[str] = Query(
        None, alias='search.db_2017_boulder_election_expenditures.purpose'
    ),
):
    """
    Search API for '2017 Boulder Election Expenditures' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/any',
    description=""" API to search for entries of type Any file type """,
    tags=[
        'file_search_operations',
        'data_file_type_search',
        'document_api_search',
        'general_api_search',
    ],
)
def search_any(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Any file type' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/beforeafter',
    description=""" API to search for entries of type Before and After Images """,
    tags=['general_api_search', 'file_search_operations'],
)
def search_beforeafter(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Before and After Images' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/biblio',
    description=""" API to search for entries of type Bibliographic Entry """,
    tags=[
        'data_extraction',
        'file_search_operations',
        'text_data_search',
        'general_api_search',
    ],
)
def search_biblio(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_biblio_primary_author: Optional[str] = Query(
        None, alias='search.biblio.primary_author'
    ),
    search_biblio_type: Optional[str] = Query(None, alias='search.biblio.type'),
    search_biblio_institution: Optional[str] = Query(
        None, alias='search.biblio.institution'
    ),
    search_biblio_other_authors: Optional[str] = Query(
        None, alias='search.biblio.other_authors'
    ),
    search_biblio_publication: Optional[str] = Query(
        None, alias='search.biblio.publication'
    ),
):
    """
    Search API for 'Bibliographic Entry' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_dicom',
    description=""" API to search for entries of type DICOM File """,
    tags=['file_search_operations', 'data_extraction', 'data_file_type_search'],
)
def search_bio_dicom(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'DICOM File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_dicom_test',
    description=""" API to search for entries of type DICOM Test File """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_bio_dicom_test(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_bio_dicom_test__patient_name: Optional[str] = Query(
        None, alias='search.bio_dicom_test.PatientName'
    ),
    search_bio_dicom_test__patient_i_d: Optional[str] = Query(
        None, alias='search.bio_dicom_test.PatientID'
    ),
):
    """
    Search API for 'DICOM Test File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_fasta',
    description=""" API to search for entries of type FASTA File """,
    tags=['file_search_operations', 'data_file_type_search', 'general_api_search'],
)
def search_bio_fasta(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FASTA File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_fastq',
    description=""" API to search for entries of type FASTQ File """,
    tags=['file_search_operations', 'data_file_type_search'],
)
def search_bio_fastq(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FASTQ File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_hmmer_index',
    description=""" API to search for entries of type HMMER Index File """,
    tags=['data_extraction', 'file_search_operations', 'data_file_type_search'],
)
def search_bio_hmmer_index(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'HMMER Index File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ome_tiff',
    description=""" API to search for entries of type OME TIFF File """,
    tags=['file_search_operations', 'data_file_type_search', 'general_api_search'],
)
def search_bio_ome_tiff(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'OME TIFF File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_assay',
    description=""" API to search for entries of type Assay """,
    tags=['data_extraction', 'general_api_search'],
)
def search_bio_ontology_assay(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Assay' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_cohort',
    description=""" API to search for entries of type Cohort """,
    tags=[
        'boulder_services_search',
        'general_api_search',
        'project_related_search_operations',
    ],
)
def search_bio_ontology_cohort(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Cohort' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_person',
    description=""" API to search for entries of type Person """,
    tags=[
        'boulder_voter_information_search',
        'geospatial_records_search',
        'general_api_search',
    ],
)
def search_bio_ontology_person(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_bio_ontology_person_gender: Optional[str] = Query(
        None, alias='search.bio_ontology_person.gender'
    ),
):
    """
    Search API for 'Person' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_sample',
    description=""" API to search for entries of type Sample """,
    tags=['general_api_search'],
)
def search_bio_ontology_sample(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Sample' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_series',
    description=""" API to search for entries of type Series """,
    tags=['boulder_services_search', 'general_api_search'],
)
def search_bio_ontology_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_ontology_study',
    description=""" API to search for entries of type Study """,
    tags=['general_api_search'],
)
def search_bio_ontology_study(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Study' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_sam',
    description=""" API to search for entries of type SAM Data """,
    tags=['general_api_search', 'data_extraction', 'text_data_search'],
)
def search_bio_sam(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SAM Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_sf_pdb',
    description=""" API to search for entries of type PDB Protein File """,
    tags=['data_extraction', 'file_search_operations', 'general_api_search'],
)
def search_bio_sf_pdb(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'PDB Protein File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_sra',
    description=""" API to search for entries of type Sequence Read Archive """,
    tags=[
        'data_extraction',
        'geographic_data_search',
        'dataset_api_search',
        'general_api_search',
    ],
)
def search_bio_sra(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Sequence Read Archive' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_stockholm',
    description=""" API to search for entries of type Stockholm File """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_bio_stockholm(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Stockholm File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bio_taxonomy',
    description=""" API to search for entries of type Taxonomic Entry """,
    tags=['geospatial_records_search', 'dataset_api_search', 'general_api_search'],
)
def search_bio_taxonomy(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_bio_taxonomy_rank: Optional[str] = Query(
        None, alias='search.bio_taxonomy.rank'
    ),
    search_bio_taxonomy_embl_code: Optional[str] = Query(
        None, alias='search.bio_taxonomy.embl_code'
    ),
    search_bio_taxonomy_division: Optional[str] = Query(
        None, alias='search.bio_taxonomy.division'
    ),
    search_bio_taxonomy_inherited_div: Optional[bool] = Query(
        None, alias='search.bio_taxonomy.inherited_div'
    ),
    search_bio_taxonomy_aliases: Optional[str] = Query(
        None, alias='search.bio_taxonomy.aliases'
    ),
):
    """
    Search API for 'Taxonomic Entry' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/blogentry',
    description=""" API to search for entries of type Weblog Entry """,
    tags=['general_api_search'],
)
def search_blogentry(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_blogentry_blogtext: Optional[str] = Query(
        None, alias='search.blogentry.blogtext'
    ),
):
    """
    Search API for 'Weblog Entry' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bolder_rental_housing',
    description=""" API to search for entries of type Boulder Rental Housing """,
    tags=['boulder_services_search', 'data_extraction', 'property_data_search'],
)
def search_bolder_rental_housing(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_bolder_rental_housing_propaddr1: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.propaddr1'
    ),
    search_db_bolder_rental_housing_rentaltype: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.rentaltype'
    ),
    search_db_bolder_rental_housing_bldgtype: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.bldgtype'
    ),
    search_db_bolder_rental_housing_dwellunits: Optional[int] = Query(
        None, alias='search.db_bolder_rental_housing.dwellunits'
    ),
    search_db_bolder_rental_housing_roomunits: Optional[int] = Query(
        None, alias='search.db_bolder_rental_housing.roomunits'
    ),
    search_db_bolder_rental_housing_neighbrhd: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.neighbrhd'
    ),
    search_db_bolder_rental_housing_complexnm: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.complexnm'
    ),
    search_db_bolder_rental_housing_name: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.name'
    ),
    search_db_bolder_rental_housing_persontype: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.persontype'
    ),
    search_db_bolder_rental_housing_company: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.company'
    ),
    search_db_bolder_rental_housing_engcompl: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.engcompl'
    ),
    search_db_bolder_rental_housing_licenseexp: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.licenseexp'
    ),
    search_db_bolder_rental_housing_licensenum: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.licensenum'
    ),
    search_db_bolder_rental_housing_ppl1_coname: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.ppl1_coname'
    ),
    search_db_bolder_rental_housing_person_1: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.person_1'
    ),
    search_db_bolder_rental_housing_ppl1_role: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.ppl1_role'
    ),
    search_db_bolder_rental_housing_ppl2_coname: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.ppl2_coname'
    ),
    search_db_bolder_rental_housing_person_2: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.person_2'
    ),
    search_db_bolder_rental_housing_ppl2_role: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.ppl2_role'
    ),
    search_db_bolder_rental_housing_location: Optional[str] = Query(
        None, alias='search.db_bolder_rental_housing.location'
    ),
):
    """
    Search API for 'Boulder Rental Housing' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/bookmarks',
    description=""" API to search for entries of type Bookmarks """,
    tags=['data_extraction', 'file_search_operations', 'general_api_search'],
)
def search_bookmarks(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_bookmarks_title: Optional[str] = Query(
        None, alias='search.db_bookmarks.title'
    ),
    search_db_bookmarks_url: Optional[str] = Query(
        None, alias='search.db_bookmarks.url'
    ),
    search_db_bookmarks_category: Optional[str] = Query(
        None, alias='search.db_bookmarks.category'
    ),
    search_db_bookmarks_date: Optional[str] = Query(
        None, alias='search.db_bookmarks.date'
    ),
):
    """
    Search API for 'Bookmarks' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boston_crime',
    description=""" API to search for entries of type Boston Crime """,
    tags=['data_extraction', 'incident_data_search'],
)
def search_boston_crime(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boston_crime_offense: Optional[str] = Query(
        None, alias='search.db_boston_crime.offense'
    ),
    search_db_boston_crime_offense_code_group: Optional[str] = Query(
        None, alias='search.db_boston_crime.offense_code_group'
    ),
    search_db_boston_crime_offense_description: Optional[str] = Query(
        None, alias='search.db_boston_crime.offense_description'
    ),
    search_db_boston_crime_district: Optional[str] = Query(
        None, alias='search.db_boston_crime.district'
    ),
    search_db_boston_crime_reporting_area: Optional[str] = Query(
        None, alias='search.db_boston_crime.reporting_area'
    ),
    search_db_boston_crime_shooting: Optional[str] = Query(
        None, alias='search.db_boston_crime.shooting'
    ),
    search_db_boston_crime_year: Optional[float] = Query(
        None, alias='search.db_boston_crime.year'
    ),
    search_db_boston_crime_month: Optional[float] = Query(
        None, alias='search.db_boston_crime.month'
    ),
    search_db_boston_crime_day_of_week: Optional[str] = Query(
        None, alias='search.db_boston_crime.day_of_week'
    ),
    search_db_boston_crime_hour: Optional[float] = Query(
        None, alias='search.db_boston_crime.hour'
    ),
    search_db_boston_crime_street: Optional[str] = Query(
        None, alias='search.db_boston_crime.street'
    ),
    search_db_boston_crime_location: Optional[str] = Query(
        None, alias='search.db_boston_crime.location'
    ),
):
    """
    Search API for 'Boston Crime' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_2017_election_contributions',
    description=""" API to search for entries of type Boulder 2017 Election Contributions """,
    tags=['boulder_elections_data_search', 'candidates_financial_data_search'],
)
def search_boulder_2017_election_contributions(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_2017_election_contributions_committee: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.committee'
    ),
    search_db_boulder_2017_election_contributions_last_name: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.last_name'
    ),
    search_db_boulder_2017_election_contributions_first_name: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.first_name'
    ),
    search_db_boulder_2017_election_contributions_street: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.street'
    ),
    search_db_boulder_2017_election_contributions_city: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.city'
    ),
    search_db_boulder_2017_election_contributions_state: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.state'
    ),
    search_db_boulder_2017_election_contributions_zip: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.zip'
    ),
    search_db_boulder_2017_election_contributions_contribution_type: Optional[
        str
    ] = Query(
        None, alias='search.db_boulder_2017_election_contributions.contribution_type'
    ),
    search_db_boulder_2017_election_contributions_from_candidate: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.from_candidate'
    ),
    search_db_boulder_2017_election_contributions_date: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.date'
    ),
    search_db_boulder_2017_election_contributions_amount: Optional[float] = Query(
        None, alias='search.db_boulder_2017_election_contributions.amount'
    ),
    search_db_boulder_2017_election_contributions_match_amount: Optional[float] = Query(
        None, alias='search.db_boulder_2017_election_contributions.match_amount'
    ),
    search_db_boulder_2017_election_contributions_ytd_amount: Optional[float] = Query(
        None, alias='search.db_boulder_2017_election_contributions.ytd_amount'
    ),
    search_db_boulder_2017_election_contributions_location: Optional[str] = Query(
        None, alias='search.db_boulder_2017_election_contributions.location'
    ),
):
    """
    Search API for 'Boulder 2017 Election Contributions' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_campaign_contributions',
    description=""" API to search for entries of type Boulder Campaign Contributions """,
    tags=['boulder_elections_data_search', 'candidates_financial_data_search'],
)
def search_boulder_campaign_contributions(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_campaign_contributions_committee: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.committee'
    ),
    search_db_boulder_campaign_contributions_type: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.type'
    ),
    search_db_boulder_campaign_contributions_committee_num: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.committee_num'
    ),
    search_db_boulder_campaign_contributions_candidate: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.candidate'
    ),
    search_db_boulder_campaign_contributions_filing_date: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.filing_date'
    ),
    search_db_boulder_campaign_contributions_amended_date: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.amended_date'
    ),
    search_db_boulder_campaign_contributions_official_filing: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.official_filing'
    ),
    search_db_boulder_campaign_contributions_transaction_date: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.transaction_date'
    ),
    search_db_boulder_campaign_contributions_last_name: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.last_name'
    ),
    search_db_boulder_campaign_contributions_first_name: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.first_name'
    ),
    search_db_boulder_campaign_contributions_street: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.street'
    ),
    search_db_boulder_campaign_contributions_city: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.city'
    ),
    search_db_boulder_campaign_contributions_state: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.state'
    ),
    search_db_boulder_campaign_contributions_zip: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.zip'
    ),
    search_db_boulder_campaign_contributions_contribution: Optional[float] = Query(
        None, alias='search.db_boulder_campaign_contributions.contribution'
    ),
    search_db_boulder_campaign_contributions_contribution_type: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.contribution_type'
    ),
    search_db_boulder_campaign_contributions_anonymous: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.anonymous'
    ),
    search_db_boulder_campaign_contributions_from_candidate: Optional[str] = Query(
        None, alias='search.db_boulder_campaign_contributions.from_candidate'
    ),
    search_db_boulder_campaign_contributions_match: Optional[float] = Query(
        None, alias='search.db_boulder_campaign_contributions.match'
    ),
):
    """
    Search API for 'Boulder Campaign Contributions' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_consulting_services',
    description=""" API to search for entries of type Boulder Consulting Services Database """,
    tags=['boulder_services_search', 'data_extraction'],
)
def search_boulder_consulting_services(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_consulting_services_fund: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.fund'
    ),
    search_db_boulder_consulting_services_department: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.department'
    ),
    search_db_boulder_consulting_services_organization: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.organization'
    ),
    search_db_boulder_consulting_services_object: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.object'
    ),
    search_db_boulder_consulting_services_project: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.project'
    ),
    search_db_boulder_consulting_services_account_description: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.account_description'
    ),
    search_db_boulder_consulting_services_date: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.date'
    ),
    search_db_boulder_consulting_services_amount: Optional[float] = Query(
        None, alias='search.db_boulder_consulting_services.amount'
    ),
    search_db_boulder_consulting_services_purchase_order: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.purchase_order'
    ),
    search_db_boulder_consulting_services_vendor_name: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.vendor_name'
    ),
    search_db_boulder_consulting_services_comment: Optional[str] = Query(
        None, alias='search.db_boulder_consulting_services.comment'
    ),
):
    """
    Search API for 'Boulder Consulting Services Database' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_county_voter_details',
    description=""" API to search for entries of type Boulder County Voter Details """,
    tags=[
        'boulder_voter_information_search',
        'boulder_elections_data_search',
        'general_api_search',
    ],
)
def search_boulder_county_voter_details(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_county_voter_details_first_name: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.first_name'
    ),
    search_db_boulder_county_voter_details_last_name: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.last_name'
    ),
    search_db_boulder_county_voter_details_registration_date: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.registration_date'
    ),
    search_db_boulder_county_voter_details_last_updated_date: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.last_updated_date'
    ),
    search_db_boulder_county_voter_details_residential_address: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.residential_address'
    ),
    search_db_boulder_county_voter_details_residential_city: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.residential_city'
    ),
    search_db_boulder_county_voter_details_mailing_zip_code: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.mailing_zip_code'
    ),
    search_db_boulder_county_voter_details_voter_status: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.voter_status'
    ),
    search_db_boulder_county_voter_details_party: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.party'
    ),
    search_db_boulder_county_voter_details_gender: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.gender'
    ),
    search_db_boulder_county_voter_details_birth_year: Optional[int] = Query(
        None, alias='search.db_boulder_county_voter_details.birth_year'
    ),
    search_db_boulder_county_voter_details_precinct_code: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.precinct_code'
    ),
    search_db_boulder_county_voter_details_congressional: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.congressional'
    ),
    search_db_boulder_county_voter_details_state_senate: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.state_senate'
    ),
    search_db_boulder_county_voter_details_state_house: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.state_house'
    ),
    search_db_boulder_county_voter_details_municipality: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.municipality'
    ),
    search_db_boulder_county_voter_details_city_ward_district: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.city_ward_district'
    ),
    search_db_boulder_county_voter_details_school_district: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.school_district'
    ),
    search_db_boulder_county_voter_details_location: Optional[str] = Query(
        None, alias='search.db_boulder_county_voter_details.location'
    ),
):
    """
    Search API for 'Boulder County Voter Details' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_crimes',
    description=""" API to search for entries of type Boulder Crime Reports """,
    tags=['boulder_crime_reports_search', 'data_extraction'],
)
def search_boulder_crimes(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_crimes_offense: Optional[str] = Query(
        None, alias='search.db_boulder_crimes.offense'
    ),
    search_db_boulder_crimes_reportdate: Optional[str] = Query(
        None, alias='search.db_boulder_crimes.reportdate'
    ),
    search_db_boulder_crimes_blockadd: Optional[str] = Query(
        None, alias='search.db_boulder_crimes.blockadd'
    ),
    search_db_boulder_crimes_location: Optional[str] = Query(
        None, alias='search.db_boulder_crimes.location'
    ),
):
    """
    Search API for 'Boulder Crime Reports' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_emails',
    description=""" API to search for entries of type Boulder Council Emails """,
    tags=['boulder_elections_data_search', 'boulder_voter_information_search'],
)
def search_boulder_emails(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_emails_sent_from: Optional[str] = Query(
        None, alias='search.db_boulder_emails.sent_from'
    ),
    search_db_boulder_emails_sent_to: Optional[str] = Query(
        None, alias='search.db_boulder_emails.sent_to'
    ),
    search_db_boulder_emails_sent_cc: Optional[str] = Query(
        None, alias='search.db_boulder_emails.sent_cc'
    ),
    search_db_boulder_emails_received_date: Optional[str] = Query(
        None, alias='search.db_boulder_emails.received_date'
    ),
    search_db_boulder_emails_email_subject: Optional[str] = Query(
        None, alias='search.db_boulder_emails.email_subject'
    ),
    search_db_boulder_emails_plain_text_body: Optional[str] = Query(
        None, alias='search.db_boulder_emails.plain_text_body'
    ),
):
    """
    Search API for 'Boulder Council Emails' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/boulder_employee_salaries',
    description=""" API to search for entries of type Boulder Employee Salaries """,
    tags=['data_extraction', 'general_api_search'],
)
def search_boulder_employee_salaries(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_boulder_employee_salaries_position_description: Optional[str] = Query(
        None, alias='search.db_boulder_employee_salaries.position_description'
    ),
    search_db_boulder_employee_salaries_department: Optional[str] = Query(
        None, alias='search.db_boulder_employee_salaries.department'
    ),
    search_db_boulder_employee_salaries_employee_flsa_exempt_y_n: Optional[str] = Query(
        None, alias='search.db_boulder_employee_salaries.employee_flsa_exempt_y_n'
    ),
    search_db_boulder_employee_salaries_pay_range_min: Optional[float] = Query(
        None, alias='search.db_boulder_employee_salaries.pay_range_min'
    ),
    search_db_boulder_employee_salaries_pay_range_max: Optional[float] = Query(
        None, alias='search.db_boulder_employee_salaries.pay_range_max'
    ),
    search_db_boulder_employee_salaries_employee_hourly_pay_rate: Optional[
        float
    ] = Query(
        None, alias='search.db_boulder_employee_salaries.employee_hourly_pay_rate'
    ),
    search_db_boulder_employee_salaries_employee_fte_in_this_position: Optional[
        float
    ] = Query(
        None, alias='search.db_boulder_employee_salaries.employee_fte_in_this_position'
    ),
    search_db_boulder_employee_salaries_employee_annual_base_salary: Optional[
        float
    ] = Query(
        None, alias='search.db_boulder_employee_salaries.employee_annual_base_salary'
    ),
):
    """
    Search API for 'Boulder Employee Salaries' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/calendar',
    description=""" API to search for entries of type Calendar """,
    tags=['calendar_entry_search', 'general_api_search'],
)
def search_calendar(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Calendar' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/campaign_donors',
    description=""" API to search for entries of type Campaign Donors """,
    tags=[
        'boulder_elections_data_search',
        'candidates_financial_data_search',
        'project_related_search_operations',
        'general_api_search',
    ],
)
def search_campaign_donors(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_campaign_donors_committee: Optional[str] = Query(
        None, alias='search.db_campaign_donors.committee'
    ),
    search_db_campaign_donors_amount: Optional[float] = Query(
        None, alias='search.db_campaign_donors.amount'
    ),
    search_db_campaign_donors_party: Optional[str] = Query(
        None, alias='search.db_campaign_donors.party'
    ),
    search_db_campaign_donors_donor: Optional[str] = Query(
        None, alias='search.db_campaign_donors.donor'
    ),
    search_db_campaign_donors_gender: Optional[str] = Query(
        None, alias='search.db_campaign_donors.gender'
    ),
    search_db_campaign_donors_city: Optional[str] = Query(
        None, alias='search.db_campaign_donors.city'
    ),
    search_db_campaign_donors_state: Optional[str] = Query(
        None, alias='search.db_campaign_donors.state'
    ),
    search_db_campaign_donors_zip_code: Optional[str] = Query(
        None, alias='search.db_campaign_donors.zip_code'
    ),
    search_db_campaign_donors_employer: Optional[str] = Query(
        None, alias='search.db_campaign_donors.employer'
    ),
    search_db_campaign_donors_occupation: Optional[str] = Query(
        None, alias='search.db_campaign_donors.occupation'
    ),
    search_db_campaign_donors_date: Optional[str] = Query(
        None, alias='search.db_campaign_donors.date'
    ),
    search_db_campaign_donors_location: Optional[str] = Query(
        None, alias='search.db_campaign_donors.location'
    ),
):
    """
    Search API for 'Campaign Donors' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/campaign_expenditures',
    description=""" API to search for entries of type Campaign Expenditures """,
    tags=[
        'boulder_elections_data_search',
        'candidates_financial_data_search',
        'project_related_search_operations',
    ],
)
def search_campaign_expenditures(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_campaign_expenditures_committee: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.committee'
    ),
    search_db_campaign_expenditures_amount: Optional[float] = Query(
        None, alias='search.db_campaign_expenditures.amount'
    ),
    search_db_campaign_expenditures_party: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.party'
    ),
    search_db_campaign_expenditures_recipient: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.recipient'
    ),
    search_db_campaign_expenditures_city: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.city'
    ),
    search_db_campaign_expenditures_state: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.state'
    ),
    search_db_campaign_expenditures_zip_code: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.zip_code'
    ),
    search_db_campaign_expenditures_transaction_date: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.transaction_date'
    ),
    search_db_campaign_expenditures_purpose: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.purpose'
    ),
    search_db_campaign_expenditures_memo_text: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.memo_text'
    ),
    search_db_campaign_expenditures_location: Optional[str] = Query(
        None, alias='search.db_campaign_expenditures.location'
    ),
):
    """
    Search API for 'Campaign Expenditures' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/cataloglink',
    description=""" API to search for entries of type Catalog Link """,
    tags=['general_api_search', 'boulder_services_search'],
)
def search_cataloglink(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Catalog Link' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/cdm_grid',
    description=""" API to search for entries of type Gridded Data File """,
    tags=['data_extraction', 'file_search_operations', 'geographic_data_search'],
)
def search_cdm_grid(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Gridded Data File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/chatroom',
    description=""" API to search for entries of type Chat Room """,
    tags=['general_api_search'],
)
def search_chatroom(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Chat Room' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/colorado_water_rights',
    description=""" API to search for entries of type Colorado Water Rights """,
    tags=['data_extraction', 'geographic_data_search', 'hydrological_data_search'],
)
def search_colorado_water_rights(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_colorado_water_rights_structure_name: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.structure_name'
    ),
    search_db_colorado_water_rights_structure_type: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.structure_type'
    ),
    search_db_colorado_water_rights_water_source: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.water_source'
    ),
    search_db_colorado_water_rights_county: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.county'
    ),
    search_db_colorado_water_rights_adjudication_date: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.adjudication_date'
    ),
    search_db_colorado_water_rights_appropriation_date: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.appropriation_date'
    ),
    search_db_colorado_water_rights_priority_no: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.priority_no'
    ),
    search_db_colorado_water_rights_decreed_uses: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.decreed_uses'
    ),
    search_db_colorado_water_rights_net_absolute: Optional[float] = Query(
        None, alias='search.db_colorado_water_rights.net_absolute'
    ),
    search_db_colorado_water_rights_net_conditional: Optional[float] = Query(
        None, alias='search.db_colorado_water_rights.net_conditional'
    ),
    search_db_colorado_water_rights_net_apex_absolute: Optional[float] = Query(
        None, alias='search.db_colorado_water_rights.net_apex_absolute'
    ),
    search_db_colorado_water_rights_net_apex_conditional: Optional[float] = Query(
        None, alias='search.db_colorado_water_rights.net_apex_conditional'
    ),
    search_db_colorado_water_rights_decreed_units: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.decreed_units'
    ),
    search_db_colorado_water_rights_seasonal_limits: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.seasonal_limits'
    ),
    search_db_colorado_water_rights_comments: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.comments'
    ),
    search_db_colorado_water_rights_more_information: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.more_information'
    ),
    search_db_colorado_water_rights_location: Optional[str] = Query(
        None, alias='search.db_colorado_water_rights.location'
    ),
):
    """
    Search API for 'Colorado Water Rights' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/committee_donations',
    description=""" API to search for entries of type Committee Donations """,
    tags=[
        'boulder_elections_data_search',
        'candidates_financial_data_search',
        'general_api_search',
    ],
)
def search_committee_donations(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_committee_donations_committee: Optional[str] = Query(
        None, alias='search.db_committee_donations.committee'
    ),
    search_db_committee_donations_amount: Optional[float] = Query(
        None, alias='search.db_committee_donations.amount'
    ),
    search_db_committee_donations_recipient: Optional[str] = Query(
        None, alias='search.db_committee_donations.recipient'
    ),
    search_db_committee_donations_date: Optional[str] = Query(
        None, alias='search.db_committee_donations.date'
    ),
    search_db_committee_donations_city: Optional[str] = Query(
        None, alias='search.db_committee_donations.city'
    ),
    search_db_committee_donations_state: Optional[str] = Query(
        None, alias='search.db_committee_donations.state'
    ),
    search_db_committee_donations_zip_code: Optional[str] = Query(
        None, alias='search.db_committee_donations.zip_code'
    ),
    search_db_committee_donations_employer: Optional[str] = Query(
        None, alias='search.db_committee_donations.employer'
    ),
    search_db_committee_donations_occupation: Optional[str] = Query(
        None, alias='search.db_committee_donations.occupation'
    ),
    search_db_committee_donations_location: Optional[str] = Query(
        None, alias='search.db_committee_donations.location'
    ),
):
    """
    Search API for 'Committee Donations' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/community_datahub',
    description=""" API to search for entries of type Data Hub """,
    tags=['general_api_search', 'data_extraction'],
)
def search_community_datahub(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Data Hub' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/community_resource',
    description=""" API to search for entries of type Facility """,
    tags=['community_resources_search', 'general_api_search'],
)
def search_community_resource(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_community_resource_resource_type: Optional[str] = Query(
        None, alias='search.community_resource.resource_type'
    ),
    search_community_resource_address: Optional[str] = Query(
        None, alias='search.community_resource.address'
    ),
    search_community_resource_city: Optional[str] = Query(
        None, alias='search.community_resource.city'
    ),
    search_community_resource_state: Optional[str] = Query(
        None, alias='search.community_resource.state'
    ),
    search_community_resource_zipcode: Optional[str] = Query(
        None, alias='search.community_resource.zipcode'
    ),
):
    """
    Search API for 'Facility' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/construction_permits',
    description=""" API to search for entries of type Construction Permits """,
    tags=['construction_permits_search', 'data_extraction'],
)
def search_construction_permits(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_construction_permits_address: Optional[str] = Query(
        None, alias='search.db_construction_permits.address'
    ),
    search_db_construction_permits_case_status: Optional[str] = Query(
        None, alias='search.db_construction_permits.case_status'
    ),
    search_db_construction_permits_category: Optional[str] = Query(
        None, alias='search.db_construction_permits.category'
    ),
    search_db_construction_permits_building_uses_and_work_scopes: Optional[str] = Query(
        None, alias='search.db_construction_permits.building_uses_and_work_scopes'
    ),
    search_db_construction_permits_permit_types: Optional[str] = Query(
        None, alias='search.db_construction_permits.permit_types'
    ),
    search_db_construction_permits_total_project_value: Optional[float] = Query(
        None, alias='search.db_construction_permits.total_project_value'
    ),
    search_db_construction_permits_total_subpermit_value: Optional[float] = Query(
        None, alias='search.db_construction_permits.total_subpermit_value'
    ),
    search_db_construction_permits_applied: Optional[str] = Query(
        None, alias='search.db_construction_permits.applied'
    ),
    search_db_construction_permits_approved: Optional[str] = Query(
        None, alias='search.db_construction_permits.approved'
    ),
    search_db_construction_permits_issued: Optional[str] = Query(
        None, alias='search.db_construction_permits.issued'
    ),
    search_db_construction_permits_co_date: Optional[str] = Query(
        None, alias='search.db_construction_permits.co_date'
    ),
    search_db_construction_permits_completion_date: Optional[str] = Query(
        None, alias='search.db_construction_permits.completion_date'
    ),
    search_db_construction_permits_new_res_unit: Optional[int] = Query(
        None, alias='search.db_construction_permits.new_res_unit'
    ),
    search_db_construction_permits_existing_res_unit: Optional[int] = Query(
        None, alias='search.db_construction_permits.existing_res_unit'
    ),
    search_db_construction_permits_affordable_hsg_unit: Optional[int] = Query(
        None, alias='search.db_construction_permits.affordable_hsg_unit'
    ),
    search_db_construction_permits_new_sf: Optional[int] = Query(
        None, alias='search.db_construction_permits.new_sf'
    ),
    search_db_construction_permits_remodel_sf: Optional[int] = Query(
        None, alias='search.db_construction_permits.remodel_sf'
    ),
    search_db_construction_permits_narrative_description: Optional[str] = Query(
        None, alias='search.db_construction_permits.narrative_description'
    ),
    search_db_construction_permits_primary_first_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.primary_first_name'
    ),
    search_db_construction_permits_primary_last_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.primary_last_name'
    ),
    search_db_construction_permits_primary_company: Optional[str] = Query(
        None, alias='search.db_construction_permits.primary_company'
    ),
    search_db_construction_permits_contractor_first_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.contractor_first_name'
    ),
    search_db_construction_permits_contractor_last_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.contractor_last_name'
    ),
    search_db_construction_permits_contractor_company: Optional[str] = Query(
        None, alias='search.db_construction_permits.contractor_company'
    ),
    search_db_construction_permits_owner1_first_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner1_first_name'
    ),
    search_db_construction_permits_owner1_last_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner1_last_name'
    ),
    search_db_construction_permits_owner1_company: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner1_company'
    ),
    search_db_construction_permits_owner2_first_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner2_first_name'
    ),
    search_db_construction_permits_owner2_last_name: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner2_last_name'
    ),
    search_db_construction_permits_owner2_company: Optional[str] = Query(
        None, alias='search.db_construction_permits.owner2_company'
    ),
):
    """
    Search API for 'Construction Permits' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/contact',
    description=""" API to search for entries of type Contact List """,
    tags=['contact_list_search', 'data_extraction'],
)
def search_contact(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_contact_name: Optional[str] = Query(None, alias='search.db_contact.name'),
    search_db_contact_institution: Optional[str] = Query(
        None, alias='search.db_contact.institution'
    ),
    search_db_contact_email: Optional[str] = Query(
        None, alias='search.db_contact.email'
    ),
):
    """
    Search API for 'Contact List' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/db_co_indicators',
    description=""" API to search for entries of type Colorado Health Indicators """,
    tags=['health_indicators_data_search', 'data_extraction'],
)
def search_db_co_indicators(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_db_co_indicators_geo_name: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.geo_name'
    ),
    search_db_db_co_indicators_domain: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.domain'
    ),
    search_db_db_co_indicators_subdomain: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.subdomain'
    ),
    search_db_db_co_indicators_indicator_name: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.indicatorName'
    ),
    search_db_db_co_indicators_description: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.description'
    ),
    search_db_db_co_indicators_measure: Optional[float] = Query(
        None, alias='search.db_db_co_indicators.measure'
    ),
    search_db_db_co_indicators_location: Optional[str] = Query(
        None, alias='search.db_db_co_indicators.location'
    ),
):
    """
    Search API for 'Colorado Health Indicators' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/earth_satellite_landsat',
    description=""" API to search for entries of type Landsat Satellite Data """,
    tags=['satellite_image_search', 'geographic_data_search', 'data_extraction'],
)
def search_earth_satellite_landsat(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_earth_satellite_landsat_sensor: Optional[str] = Query(
        None, alias='search.earth_satellite_landsat.sensor'
    ),
    search_earth_satellite_landsat_satellite: Optional[str] = Query(
        None, alias='search.earth_satellite_landsat.satellite'
    ),
    search_earth_satellite_landsat_wrs_path_number: Optional[int] = Query(
        None, alias='search.earth_satellite_landsat.wrs_path_number'
    ),
    search_earth_satellite_landsat_wrs_row_number: Optional[int] = Query(
        None, alias='search.earth_satellite_landsat.wrs_row_number'
    ),
    search_earth_satellite_landsat_ground_station: Optional[str] = Query(
        None, alias='search.earth_satellite_landsat.ground_station'
    ),
    search_earth_satellite_landsat_archive_version_number: Optional[int] = Query(
        None, alias='search.earth_satellite_landsat.archive_version_number'
    ),
):
    """
    Search API for 'Landsat Satellite Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/faq',
    description=""" API to search for entries of type FAQ """,
    tags=['faq_entries_search', 'general_api_search'],
)
def search_faq(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FAQ' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/fec_pacs',
    description=""" API to search for entries of type FEC PACs """,
    tags=[
        'federal_election_records_search',
        'candidates_financial_data_search',
        'data_extraction',
    ],
)
def search_fec_pacs(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_fec_pacs_committee: Optional[str] = Query(
        None, alias='search.db_fec_pacs.committee'
    ),
    search_db_fec_pacs_total_receipts: Optional[float] = Query(
        None, alias='search.db_fec_pacs.total_receipts'
    ),
    search_db_fec_pacs_beginning_cash: Optional[float] = Query(
        None, alias='search.db_fec_pacs.beginning_cash'
    ),
    search_db_fec_pacs_ending_cash: Optional[float] = Query(
        None, alias='search.db_fec_pacs.ending_cash'
    ),
    search_db_fec_pacs_contributions_from_individuals: Optional[float] = Query(
        None, alias='search.db_fec_pacs.contributions_from_individuals'
    ),
    search_db_fec_pacs_contributions_from_other_committees: Optional[float] = Query(
        None, alias='search.db_fec_pacs.contributions_from_other_committees'
    ),
    search_db_fec_pacs_trans_from_affiliates: Optional[float] = Query(
        None, alias='search.db_fec_pacs.trans_from_affiliates'
    ),
    search_db_fec_pacs_contributions_to_other_committee: Optional[float] = Query(
        None, alias='search.db_fec_pacs.contributions_to_other_committee'
    ),
    search_db_fec_pacs_contributions_from_candidate: Optional[float] = Query(
        None, alias='search.db_fec_pacs.contributions_from_candidate'
    ),
    search_db_fec_pacs_loans_from_candidate: Optional[float] = Query(
        None, alias='search.db_fec_pacs.loans_from_candidate'
    ),
    search_db_fec_pacs_total_loans_received: Optional[float] = Query(
        None, alias='search.db_fec_pacs.total_loans_received'
    ),
    search_db_fec_pacs_total_distributions: Optional[float] = Query(
        None, alias='search.db_fec_pacs.total_distributions'
    ),
    search_db_fec_pacs_transfers_to_affiliates: Optional[float] = Query(
        None, alias='search.db_fec_pacs.transfers_to_affiliates'
    ),
    search_db_fec_pacs_refunds_to_individuals: Optional[float] = Query(
        None, alias='search.db_fec_pacs.refunds_to_individuals'
    ),
    search_db_fec_pacs_refends_to_othercommittees: Optional[float] = Query(
        None, alias='search.db_fec_pacs.refends_to_othercommittees'
    ),
    search_db_fec_pacs_candidate_loan_repayments: Optional[float] = Query(
        None, alias='search.db_fec_pacs.candidate_loan_repayments'
    ),
    search_db_fec_pacs_loan_repayments: Optional[float] = Query(
        None, alias='search.db_fec_pacs.loan_repayments'
    ),
):
    """
    Search API for 'FEC PACs' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/feccandidates',
    description=""" API to search for entries of type Candidates """,
    tags=[
        'boulder_elections_data_search',
        'candidates_financial_data_search',
        'federal_election_records_search',
        'general_api_search',
    ],
)
def search_feccandidates(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_feccandidates_name: Optional[str] = Query(
        None, alias='search.db_feccandidates.name'
    ),
    search_db_feccandidates_party: Optional[str] = Query(
        None, alias='search.db_feccandidates.party'
    ),
    search_db_feccandidates_state: Optional[str] = Query(
        None, alias='search.db_feccandidates.state'
    ),
    search_db_feccandidates_district: Optional[str] = Query(
        None, alias='search.db_feccandidates.district'
    ),
    search_db_feccandidates_gender: Optional[str] = Query(
        None, alias='search.db_feccandidates.gender'
    ),
    search_db_feccandidates_beginning_cash: Optional[float] = Query(
        None, alias='search.db_feccandidates.beginning_cash'
    ),
    search_db_feccandidates_ending_cash: Optional[float] = Query(
        None, alias='search.db_feccandidates.ending_cash'
    ),
    search_db_feccandidates_total_receipts: Optional[float] = Query(
        None, alias='search.db_feccandidates.total_receipts'
    ),
    search_db_feccandidates_total_indivual_contributions: Optional[float] = Query(
        None, alias='search.db_feccandidates.total_indivual_contributions'
    ),
    search_db_feccandidates_transfers_from_committees: Optional[float] = Query(
        None, alias='search.db_feccandidates.transfers_from_committees'
    ),
    search_db_feccandidates_transfers_to_committees: Optional[float] = Query(
        None, alias='search.db_feccandidates.transfers_to_committees'
    ),
    search_db_feccandidates_total_disbursements: Optional[float] = Query(
        None, alias='search.db_feccandidates.total_disbursements'
    ),
    search_db_feccandidates_contributions_from_candidate: Optional[float] = Query(
        None, alias='search.db_feccandidates.contributions_from_candidate'
    ),
    search_db_feccandidates_loans_from_candidates: Optional[float] = Query(
        None, alias='search.db_feccandidates.loans_from_candidates'
    ),
    search_db_feccandidates_other_loans: Optional[float] = Query(
        None, alias='search.db_feccandidates.other_loans'
    ),
    search_db_feccandidates_candidate_loan_repayments: Optional[float] = Query(
        None, alias='search.db_feccandidates.candidate_loan_repayments'
    ),
    search_db_feccandidates_other_loan_repayments: Optional[float] = Query(
        None, alias='search.db_feccandidates.other_loan_repayments'
    ),
    search_db_feccandidates_debts_owed_by: Optional[float] = Query(
        None, alias='search.db_feccandidates.debts_owed_by'
    ),
    search_db_feccandidates_contributions_from_other_committees: Optional[
        float
    ] = Query(
        None, alias='search.db_feccandidates.contributions_from_other_committees'
    ),
    search_db_feccandidates_contributions_from_party_committees: Optional[
        float
    ] = Query(
        None, alias='search.db_feccandidates.contributions_from_party_committees'
    ),
    search_db_feccandidates_coverage_end_date: Optional[str] = Query(
        None, alias='search.db_feccandidates.coverage_end_date'
    ),
    search_db_feccandidates_individual_refunds: Optional[float] = Query(
        None, alias='search.db_feccandidates.individual_refunds'
    ),
    search_db_feccandidates_committee_refunds: Optional[float] = Query(
        None, alias='search.db_feccandidates.committee_refunds'
    ),
):
    """
    Search API for 'Candidates' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/feed',
    description=""" API to search for entries of type RSS/ATOM Feed """,
    tags=['general_api_search', 'file_search_operations'],
)
def search_feed(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'RSS/ATOM Feed' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/file',
    description=""" API to search for entries of type File """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_file(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/fits_data',
    description=""" API to search for entries of type FITS Data File """,
    tags=['data_file_type_search', 'file_search_operations'],
)
def search_fits_data(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_fits_data_origin: Optional[str] = Query(
        None, alias='search.fits_data.origin'
    ),
    search_fits_data_telescope: Optional[str] = Query(
        None, alias='search.fits_data.telescope'
    ),
    search_fits_data_instrument: Optional[str] = Query(
        None, alias='search.fits_data.instrument'
    ),
):
    """
    Search API for 'FITS Data File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/ftp',
    description=""" API to search for entries of type Remote FTP File View """,
    tags=['file_search_operations', 'data_file_type_search'],
)
def search_ftp(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Remote FTP File View' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gadgets_countdown',
    description=""" API to search for entries of type Countdown """,
    tags=['general_api_search', 'calendar_entry_search'],
)
def search_gadgets_countdown(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Countdown' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gadgets_stock',
    description=""" API to search for entries of type Stock Ticker """,
    tags=['general_api_search', 'data_extraction'],
)
def search_gadgets_stock(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Stock Ticker' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gadgets_weather',
    description=""" API to search for entries of type Weather """,
    tags=[
        'weather_data_search_operations',
        'hazard_data_search',
        'combined_weather_data_search',
    ],
)
def search_gadgets_weather(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Weather' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gazeteer_census_tracts',
    description=""" API to search for entries of type Census Tracts """,
    tags=['geographic_data_search', 'data_extraction'],
)
def search_gazeteer_census_tracts(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_gazeteer_census_tracts_state: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.state'
    ),
    search_db_gazeteer_census_tracts_state_fips: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.state_fips'
    ),
    search_db_gazeteer_census_tracts_county_name: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.county_name'
    ),
    search_db_gazeteer_census_tracts_county_fips: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.county_fips'
    ),
    search_db_gazeteer_census_tracts_census_tract_id: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.census_tract_id'
    ),
    search_db_gazeteer_census_tracts_full_census_tract_id: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.full_census_tract_id'
    ),
    search_db_gazeteer_census_tracts_land_area: Optional[float] = Query(
        None, alias='search.db_gazeteer_census_tracts.land_area'
    ),
    search_db_gazeteer_census_tracts_water_area: Optional[float] = Query(
        None, alias='search.db_gazeteer_census_tracts.water_area'
    ),
    search_db_gazeteer_census_tracts_location: Optional[str] = Query(
        None, alias='search.db_gazeteer_census_tracts.location'
    ),
):
    """
    Search API for 'Census Tracts' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gazeteer_counties',
    description=""" API to search for entries of type Census Gazeteer Counties """,
    tags=['geographic_data_search', 'general_api_search', 'data_extraction'],
)
def search_gazeteer_counties(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_gazeteer_counties_state_abbreviation: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.state_abbreviation'
    ),
    search_db_gazeteer_counties_state_fips: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.state_fips'
    ),
    search_db_gazeteer_counties_county_fips: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.county_fips'
    ),
    search_db_gazeteer_counties_full_county_fips: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.full_county_fips'
    ),
    search_db_gazeteer_counties_county_name: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.county_name'
    ),
    search_db_gazeteer_counties_area_land: Optional[float] = Query(
        None, alias='search.db_gazeteer_counties.area_land'
    ),
    search_db_gazeteer_counties_area_water: Optional[float] = Query(
        None, alias='search.db_gazeteer_counties.area_water'
    ),
    search_db_gazeteer_counties_location: Optional[str] = Query(
        None, alias='search.db_gazeteer_counties.location'
    ),
):
    """
    Search API for 'Census Gazeteer Counties' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_geojson',
    description=""" API to search for entries of type GeoJson File """,
    tags=['geo_file_search_operations', 'geographic_data_search'],
)
def search_geo_geojson(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'GeoJson File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_geotiff',
    description=""" API to search for entries of type GeoTIFF """,
    tags=['geo_file_search_operations', 'geographic_data_search'],
)
def search_geo_geotiff(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'GeoTIFF' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_gpx',
    description=""" API to search for entries of type GPX GPS File """,
    tags=[
        'gps_data_search_operations',
        'geographic_data_search',
        'geo_file_search_operations',
    ],
)
def search_geo_gpx(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_geo_gpx_distance: Optional[float] = Query(
        None, alias='search.geo_gpx.distance'
    ),
    search_geo_gpx_total_time: Optional[float] = Query(
        None, alias='search.geo_gpx.total_time'
    ),
    search_geo_gpx_moving_time: Optional[float] = Query(
        None, alias='search.geo_gpx.moving_time'
    ),
    search_geo_gpx_speed: Optional[float] = Query(None, alias='search.geo_gpx.speed'),
    search_geo_gpx_elevation_gain: Optional[float] = Query(
        None, alias='search.geo_gpx.elevation_gain'
    ),
    search_geo_gpx_elevation_loss: Optional[float] = Query(
        None, alias='search.geo_gpx.elevation_loss'
    ),
):
    """
    Search API for 'GPX GPS File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_hdf5',
    description=""" API to search for entries of type HDF5 File """,
    tags=['file_search_operations', 'data_file_type_search', 'general_api_search'],
)
def search_geo_hdf5(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'HDF5 File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_kml',
    description=""" API to search for entries of type KML/KMZ File """,
    tags=[
        'file_search_operations',
        'geographic_data_search',
        'geo_file_search_operations',
    ],
)
def search_geo_kml(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'KML/KMZ File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_shapefile',
    description=""" API to search for entries of type Shapefile """,
    tags=[
        'file_search_operations',
        'geo_file_search_operations',
        'geographic_data_search',
    ],
)
def search_geo_shapefile(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Shapefile' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/geo_shapefile_fips',
    description=""" API to search for entries of type Shapefile with FIPS Code """,
    tags=['geo_file_search_operations', 'geographic_data_search'],
)
def search_geo_shapefile_fips(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Shapefile with FIPS Code' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/glossary',
    description=""" API to search for entries of type Glossary """,
    tags=['notes_and_glossary_entries_search', 'general_api_search'],
)
def search_glossary(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Glossary' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/gridaggregation',
    description=""" API to search for entries of type Grid Aggregation """,
    tags=['general_api_search', 'data_extraction', 'boulder_elections_data_search'],
)
def search_gridaggregation(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Grid Aggregation' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/group',
    description=""" API to search for entries of type Folder """,
    tags=['file_search_operations', 'group_types_search', 'general_api_search'],
)
def search_group(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Folder' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/hipchat_group',
    description=""" API to search for entries of type HipChat Group """,
    tags=['general_api_search'],
)
def search_hipchat_group(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'HipChat Group' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/homepage',
    description=""" API to search for entries of type Home Page """,
    tags=['general_api_search', 'boulder_services_search'],
)
def search_homepage(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Home Page' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/incident',
    description=""" API to search for entries of type Incident """,
    tags=['incident_data_search', 'general_api_search'],
)
def search_incident(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_incident_incidenttype: Optional[str] = Query(
        None, alias='search.incident.incidenttype'
    ),
    search_incident_cause: Optional[str] = Query(None, alias='search.incident.cause'),
    search_incident_state: Optional[str] = Query(None, alias='search.incident.state'),
):
    """
    Search API for 'Incident' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/jeopardy',
    description=""" API to search for entries of type Jeopardy """,
    tags=['general_api_search', 'text_data_search'],
)
def search_jeopardy(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_jeopardy_question: Optional[str] = Query(
        None, alias='search.db_jeopardy.question'
    ),
    search_db_jeopardy_answer: Optional[str] = Query(
        None, alias='search.db_jeopardy.answer'
    ),
    search_db_jeopardy_round: Optional[str] = Query(
        None, alias='search.db_jeopardy.round'
    ),
    search_db_jeopardy_category: Optional[str] = Query(
        None, alias='search.db_jeopardy.category'
    ),
    search_db_jeopardy_air_date: Optional[str] = Query(
        None, alias='search.db_jeopardy.air_date'
    ),
):
    """
    Search API for 'Jeopardy' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/latlonimage',
    description=""" API to search for entries of type Lat-Lon Image """,
    tags=['geographic_data_search', 'geospatial_records_search'],
)
def search_latlonimage(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Lat-Lon Image' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/lidar_collection',
    description=""" API to search for entries of type LiDAR Collection """,
    tags=[
        'lidar_data_collection_search',
        'geospatial_records_search',
        'data_extraction',
    ],
)
def search_lidar_collection(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'LiDAR Collection' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/lidar_las',
    description=""" API to search for entries of type LAS Lidar Data """,
    tags=['lidar_data_collection_search', 'data_extraction', 'geographic_data_search'],
)
def search_lidar_las(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'LAS Lidar Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/lidar_lvis',
    description=""" API to search for entries of type LVIS Lidar Data """,
    tags=['lidar_data_collection_search', 'general_api_search'],
)
def search_lidar_lvis(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'LVIS Lidar Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/link',
    description=""" API to search for entries of type Link """,
    tags=['general_api_search', 'boulder_services_search'],
)
def search_link(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Link' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/localfiles',
    description=""" API to search for entries of type Server Side Files """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_localfiles(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Server Side Files' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/locations',
    description=""" API to search for entries of type Locations """,
    tags=['location_information_search', 'geographic_data_search'],
)
def search_locations(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_locations_name: Optional[str] = Query(
        None, alias='search.db_locations.name'
    ),
    search_db_locations_type: Optional[str] = Query(
        None, alias='search.db_locations.type'
    ),
    search_db_locations_location: Optional[str] = Query(
        None, alias='search.db_locations.location'
    ),
):
    """
    Search API for 'Locations' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/map_googlemap',
    description=""" API to search for entries of type Google Map URL """,
    tags=[
        'map_data_search',
        'geographic_data_search',
        'location_information_search',
        'general_api_search',
    ],
)
def search_map_googlemap(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Google Map URL' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_audiofile',
    description=""" API to search for entries of type Audio File """,
    tags=['file_search_operations', 'media_item_search_operations', 'data_extraction'],
)
def search_media_audiofile(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Audio File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_imageloop',
    description=""" API to search for entries of type Image Loop """,
    tags=[
        'general_api_search',
        'file_search_operations',
        'media_item_search_operations',
    ],
)
def search_media_imageloop(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Image Loop' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_photoalbum',
    description=""" API to search for entries of type Photo Album """,
    tags=[
        'file_search_operations',
        'media_item_search_operations',
        'general_api_search',
    ],
)
def search_media_photoalbum(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Photo Album' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_video_channel',
    description=""" API to search for entries of type Video Channel """,
    tags=['media_item_search_operations', 'general_api_search'],
)
def search_media_video_channel(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Video Channel' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_video_quicktime',
    description=""" API to search for entries of type Quicktime Video """,
    tags=[
        'file_search_operations',
        'media_item_search_operations',
        'general_api_search',
    ],
)
def search_media_video_quicktime(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Quicktime Video' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/media_youtubevideo',
    description=""" API to search for entries of type YouTube Video """,
    tags=[
        'social_media_content_search',
        'general_api_search',
        'media_item_search_operations',
    ],
)
def search_media_youtubevideo(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'YouTube Video' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/notes',
    description=""" API to search for entries of type Notes """,
    tags=['notes_and_glossary_entries_search', 'general_api_search'],
)
def search_notes(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_notes_note: Optional[str] = Query(None, alias='search.db_notes.note'),
):
    """
    Search API for 'Notes' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/notes_jsonfile',
    description=""" API to search for entries of type Json File """,
    tags=['file_search_operations', 'data_file_type_search', 'general_api_search'],
)
def search_notes_jsonfile(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Json File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/notes_note',
    description=""" API to search for entries of type Note """,
    tags=['notes_and_glossary_entries_search', 'general_api_search'],
)
def search_notes_note(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Note' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/notes_notebook',
    description=""" API to search for entries of type Notebook """,
    tags=['notebook_entries_search', 'general_api_search'],
)
def search_notes_notebook(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Notebook' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/nwsfeed',
    description=""" API to search for entries of type NWS Forecast Feed """,
    tags=[
        'forecast_data_search',
        'weather_data_search_operations',
        'general_api_search',
    ],
)
def search_nwsfeed(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NWS Forecast Feed' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/opendaplink',
    description=""" API to search for entries of type OPeNDAP Link """,
    tags=['opendap_datasets_search', 'general_api_search'],
)
def search_opendaplink(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'OPeNDAP Link' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/owl.class',
    description=""" API to search for entries of type OWL Class """,
    tags=['owl_classes_search', 'general_api_search'],
)
def search_owl_class(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'OWL Class' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/owl.ontology',
    description=""" API to search for entries of type OWL Ontology """,
    tags=['owl_classes_search', 'general_api_search'],
)
def search_owl_ontology(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'OWL Ontology' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/pasteitentry',
    description=""" API to search for entries of type Paste Text Entry """,
    tags=['boulder_elections_data_search', 'text_data_search', 'general_api_search'],
)
def search_pasteitentry(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Paste Text Entry' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/point_text',
    description=""" API to search for entries of type Text Point Data """,
    tags=[
        'text_data_search',
        'general_api_search',
        'point_data_search_apis',
        'data_extraction',
    ],
)
def search_point_text(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Text Point Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/police_stop_data',
    description=""" API to search for entries of type Police Stop Data """,
    tags=['policing_data_search', 'data_extraction'],
)
def search_police_stop_data(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_police_stop_data_race: Optional[str] = Query(
        None, alias='search.db_police_stop_data.race'
    ),
    search_db_police_stop_data_ethnicity: Optional[str] = Query(
        None, alias='search.db_police_stop_data.ethnicity'
    ),
    search_db_police_stop_data_sex: Optional[str] = Query(
        None, alias='search.db_police_stop_data.sex'
    ),
    search_db_police_stop_data_minutes: Optional[int] = Query(
        None, alias='search.db_police_stop_data.minutes'
    ),
    search_db_police_stop_data_date: Optional[str] = Query(
        None, alias='search.db_police_stop_data.date'
    ),
    search_db_police_stop_data_address: Optional[str] = Query(
        None, alias='search.db_police_stop_data.address'
    ),
    search_db_police_stop_data_resident: Optional[str] = Query(
        None, alias='search.db_police_stop_data.resident'
    ),
):
    """
    Search API for 'Police Stop Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/poll',
    description=""" API to search for entries of type Poll """,
    tags=['boulder_elections_data_search', 'voting_process_data_search'],
)
def search_poll(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Poll' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_campaign',
    description=""" API to search for entries of type Campaign """,
    tags=['project_related_search_operations'],
)
def search_project_campaign(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Campaign' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_casestudy',
    description=""" API to search for entries of type Case Study """,
    tags=['project_related_search_operations', 'general_api_search'],
)
def search_project_casestudy(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_casestudy_intended_use: Optional[str] = Query(
        None, alias='search.project_casestudy.intended_use'
    ),
    search_project_casestudy_location: Optional[str] = Query(
        None, alias='search.project_casestudy.location'
    ),
):
    """
    Search API for 'Case Study' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_contribution',
    description=""" API to search for entries of type Research Contribution """,
    tags=['general_api_search', 'project_related_search_operations'],
)
def search_project_contribution(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Research Contribution' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_dataformat',
    description=""" API to search for entries of type Data Format """,
    tags=['file_search_operations', 'data_extraction', 'general_api_search'],
)
def search_project_dataformat(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_dataformat_data_type: Optional[str] = Query(
        None, alias='search.project_dataformat.data_type'
    ),
    search_project_dataformat_field: Optional[str] = Query(
        None, alias='search.project_dataformat.field'
    ),
):
    """
    Search API for 'Data Format' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_dataset',
    description=""" API to search for entries of type Dataset """,
    tags=['dataset_api_search', 'data_extraction', 'general_api_search'],
)
def search_project_dataset(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_dataset_dataset_id: Optional[str] = Query(
        None, alias='search.project_dataset.dataset_id'
    ),
    search_project_dataset_data_type: Optional[str] = Query(
        None, alias='search.project_dataset.data_type'
    ),
    search_project_dataset_data_level: Optional[str] = Query(
        None, alias='search.project_dataset.data_level'
    ),
):
    """
    Search API for 'Dataset' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_deployment',
    description=""" API to search for entries of type Deployment """,
    tags=['general_api_search'],
)
def search_project_deployment(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Deployment' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_experiment',
    description=""" API to search for entries of type Experiment """,
    tags=['project_related_search_operations', 'general_api_search'],
)
def search_project_experiment(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Experiment' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_fieldnote',
    description=""" API to search for entries of type Field Note """,
    tags=['general_api_search', 'file_search_operations'],
)
def search_project_fieldnote(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Field Note' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_gps_controlpoints',
    description=""" API to search for entries of type Control Points File """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_project_gps_controlpoints(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Control Points File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_gps_raw',
    description=""" API to search for entries of type Raw GPS File """,
    tags=['gps_data_search_operations', 'geographic_data_search', 'general_api_search'],
)
def search_project_gps_raw(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Raw GPS File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_gps_rinex',
    description=""" API to search for entries of type RINEX File """,
    tags=['file_search_operations', 'data_extraction', 'geographic_data_search'],
)
def search_project_gps_rinex(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'RINEX File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_instrument',
    description=""" API to search for entries of type Instrument Data Collection """,
    tags=['data_extraction', 'general_api_search', 'geographic_data_search'],
)
def search_project_instrument(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Instrument Data Collection' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_learning_resource',
    description=""" API to search for entries of type Teaching Resource """,
    tags=['learning_resources_search', 'general_api_search'],
)
def search_project_learning_resource(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_learning_resource_topic: Optional[str] = Query(
        None, alias='search.project_learning_resource.topic'
    ),
    search_project_learning_resource_grade_level: Optional[str] = Query(
        None, alias='search.project_learning_resource.grade_level'
    ),
):
    """
    Search API for 'Teaching Resource' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_meeting',
    description=""" API to search for entries of type Meeting """,
    tags=[
        'meeting_entries_search',
        'calendar_entry_search',
        'project_related_search_operations',
    ],
)
def search_project_meeting(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_meeting_topic: Optional[str] = Query(
        None, alias='search.project_meeting.topic'
    ),
    search_project_meeting_location: Optional[str] = Query(
        None, alias='search.project_meeting.location'
    ),
    search_project_meeting_participants: Optional[str] = Query(
        None, alias='search.project_meeting.participants'
    ),
):
    """
    Search API for 'Meeting' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_organization',
    description=""" API to search for entries of type Organization """,
    tags=['general_api_search', 'project_related_search_operations'],
)
def search_project_organization(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_organization_organization_type: Optional[str] = Query(
        None, alias='search.project_organization.organization_type'
    ),
    search_project_organization_status: Optional[str] = Query(
        None, alias='search.project_organization.status'
    ),
):
    """
    Search API for 'Organization' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_program',
    description=""" API to search for entries of type Program """,
    tags=['general_api_search', 'project_related_search_operations'],
)
def search_project_program(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Program' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_project',
    description=""" API to search for entries of type Project """,
    tags=['project_related_search_operations', 'general_api_search'],
)
def search_project_project(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Project' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_service',
    description=""" API to search for entries of type Data Access Service """,
    tags=['general_api_search', 'data_extraction', 'project_related_search_operations'],
)
def search_project_service(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_service_service_type: Optional[str] = Query(
        None, alias='search.project_service.service_type'
    ),
    search_project_service_provider: Optional[str] = Query(
        None, alias='search.project_service.provider'
    ),
):
    """
    Search API for 'Data Access Service' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_site',
    description=""" API to search for entries of type Site """,
    tags=['general_api_search', 'project_related_search_operations'],
)
def search_project_site(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_site_short_name: Optional[str] = Query(
        None, alias='search.project_site.short_name'
    ),
    search_project_site_site_type: Optional[str] = Query(
        None, alias='search.project_site.site_type'
    ),
    search_project_site_status: Optional[str] = Query(
        None, alias='search.project_site.status'
    ),
    search_project_site_network: Optional[str] = Query(
        None, alias='search.project_site.network'
    ),
    search_project_site_country: Optional[str] = Query(
        None, alias='search.project_site.country'
    ),
    search_project_site_state: Optional[str] = Query(
        None, alias='search.project_site.state'
    ),
    search_project_site_county: Optional[str] = Query(
        None, alias='search.project_site.county'
    ),
):
    """
    Search API for 'Site' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_softwarepackage',
    description=""" API to search for entries of type Software Tool """,
    tags=['general_api_search', 'project_related_search_operations'],
)
def search_project_softwarepackage(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_softwarepackage_software_use: Optional[str] = Query(
        None, alias='search.project_softwarepackage.software_use'
    ),
    search_project_softwarepackage_software_type: Optional[str] = Query(
        None, alias='search.project_softwarepackage.software_type'
    ),
    search_project_softwarepackage_domain: Optional[str] = Query(
        None, alias='search.project_softwarepackage.domain'
    ),
    search_project_softwarepackage_platform: Optional[str] = Query(
        None, alias='search.project_softwarepackage.platform'
    ),
    search_project_softwarepackage_license: Optional[str] = Query(
        None, alias='search.project_softwarepackage.license'
    ),
    search_project_softwarepackage_status: Optional[str] = Query(
        None, alias='search.project_softwarepackage.status'
    ),
    search_project_softwarepackage_capabilities: Optional[str] = Query(
        None, alias='search.project_softwarepackage.capabilities'
    ),
):
    """
    Search API for 'Software Tool' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_standard_name',
    description=""" API to search for entries of type Standard Parameter Name """,
    tags=['standard_name_search', 'general_api_search'],
)
def search_project_standard_name(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_standard_name_unit: Optional[str] = Query(
        None, alias='search.project_standard_name.unit'
    ),
    search_project_standard_name_aliases: Optional[str] = Query(
        None, alias='search.project_standard_name.aliases'
    ),
):
    """
    Search API for 'Standard Parameter Name' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_surveylocation',
    description=""" API to search for entries of type Survey Location """,
    tags=[
        'boulder_services_search',
        'general_api_search',
        'location_information_search',
    ],
)
def search_project_surveylocation(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Survey Location' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_term',
    description=""" API to search for entries of type Vocabulary Term """,
    tags=['general_api_search'],
)
def search_project_term(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_project_term_value: Optional[str] = Query(
        None, alias='search.project_term.value'
    ),
):
    """
    Search API for 'Vocabulary Term' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_visit',
    description=""" API to search for entries of type Site Visit """,
    tags=['general_api_search', 'boulder_services_search'],
)
def search_project_visit(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Site Visit' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/project_vocabulary',
    description=""" API to search for entries of type Vocabulary """,
    tags=['general_api_search', 'data_extraction', 'text_data_search'],
)
def search_project_vocabulary(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Vocabulary' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/property_sales',
    description=""" API to search for entries of type Property Sales """,
    tags=['property_data_search', 'data_extraction'],
)
def search_property_sales(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_property_sales_property_address: Optional[str] = Query(
        None, alias='search.db_property_sales.property_address'
    ),
    search_db_property_sales_city: Optional[str] = Query(
        None, alias='search.db_property_sales.city'
    ),
    search_db_property_sales_zipcode: Optional[str] = Query(
        None, alias='search.db_property_sales.zipcode'
    ),
    search_db_property_sales_sale_price: Optional[float] = Query(
        None, alias='search.db_property_sales.sale_price'
    ),
    search_db_property_sales_sale_date: Optional[str] = Query(
        None, alias='search.db_property_sales.sale_date'
    ),
    search_db_property_sales_seller: Optional[str] = Query(
        None, alias='search.db_property_sales.seller'
    ),
    search_db_property_sales_buyer: Optional[str] = Query(
        None, alias='search.db_property_sales.buyer'
    ),
    search_db_property_sales_type: Optional[str] = Query(
        None, alias='search.db_property_sales.type'
    ),
    search_db_property_sales_building_description: Optional[str] = Query(
        None, alias='search.db_property_sales.building_description'
    ),
    search_db_property_sales_building_design: Optional[str] = Query(
        None, alias='search.db_property_sales.building_design'
    ),
    search_db_property_sales_subdivision: Optional[str] = Query(
        None, alias='search.db_property_sales.subdivision'
    ),
    search_db_property_sales_location: Optional[str] = Query(
        None, alias='search.db_property_sales.location'
    ),
):
    """
    Search API for 'Property Sales' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/propertydb',
    description=""" API to search for entries of type Property Database """,
    tags=['property_data_search', 'data_extraction'],
)
def search_propertydb(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_propertydb_property_id: Optional[str] = Query(
        None, alias='search.db_propertydb.property_id'
    ),
    search_db_propertydb_owner: Optional[str] = Query(
        None, alias='search.db_propertydb.owner'
    ),
    search_db_propertydb_address: Optional[str] = Query(
        None, alias='search.db_propertydb.address'
    ),
    search_db_propertydb_city: Optional[str] = Query(
        None, alias='search.db_propertydb.city'
    ),
    search_db_propertydb_state: Optional[str] = Query(
        None, alias='search.db_propertydb.state'
    ),
    search_db_propertydb_value: Optional[int] = Query(
        None, alias='search.db_propertydb.value'
    ),
    search_db_propertydb_building_type: Optional[str] = Query(
        None, alias='search.db_propertydb.building_type'
    ),
    search_db_propertydb_house_size: Optional[int] = Query(
        None, alias='search.db_propertydb.house_size'
    ),
    search_db_propertydb_lot_sqft: Optional[int] = Query(
        None, alias='search.db_propertydb.lot_sqft'
    ),
    search_db_propertydb_lot_acres: Optional[float] = Query(
        None, alias='search.db_propertydb.lot_acres'
    ),
    search_db_propertydb_price_sqft: Optional[float] = Query(
        None, alias='search.db_propertydb.price_sqft'
    ),
    search_db_propertydb_location: Optional[str] = Query(
        None, alias='search.db_propertydb.location'
    ),
):
    """
    Search API for 'Property Database' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/python_notebook',
    description=""" API to search for entries of type IPython Notebook file """,
    tags=['file_search_operations', 'notebook_entries_search'],
)
def search_python_notebook(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'IPython Notebook file' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/slack_team',
    description=""" API to search for entries of type Slack Team """,
    tags=['general_api_search', 'text_data_search', 'social_media_content_search'],
)
def search_slack_team(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Slack Team' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/statusboard',
    description=""" API to search for entries of type Status Board """,
    tags=[
        'boulder_elections_data_search',
        'boulder_voter_information_search',
        'voting_process_data_search',
    ],
)
def search_statusboard(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_statusboard_what: Optional[str] = Query(
        None, alias='search.db_statusboard.what'
    ),
    search_db_statusboard_status: Optional[str] = Query(
        None, alias='search.db_statusboard.status'
    ),
):
    """
    Search API for 'Status Board' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/sunrisesunset',
    description=""" API to search for entries of type Sunrise/Sunset Display """,
    tags=['general_api_search', 'weather_data_search_operations'],
)
def search_sunrisesunset(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Sunrise/Sunset Display' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/tasks',
    description=""" API to search for entries of type Tasks """,
    tags=['task_search_operations', 'general_api_search'],
)
def search_tasks(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_tasks_title: Optional[str] = Query(None, alias='search.db_tasks.title'),
    search_db_tasks_priority: Optional[str] = Query(
        None, alias='search.db_tasks.priority'
    ),
    search_db_tasks_status: Optional[str] = Query(None, alias='search.db_tasks.status'),
    search_db_tasks_complete: Optional[float] = Query(
        None, alias='search.db_tasks.complete'
    ),
    search_db_tasks_assignedto: Optional[str] = Query(
        None, alias='search.db_tasks.assignedto'
    ),
    search_db_tasks_startdate: Optional[str] = Query(
        None, alias='search.db_tasks.startdate'
    ),
    search_db_tasks_enddate: Optional[str] = Query(
        None, alias='search.db_tasks.enddate'
    ),
):
    """
    Search API for 'Tasks' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/tmdbmovies',
    description=""" API to search for entries of type Tmdb Movies """,
    tags=['data_extraction', 'general_api_search'],
)
def search_tmdbmovies(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_tmdbmovies_original_title: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.original_title'
    ),
    search_db_tmdbmovies_overview: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.overview'
    ),
    search_db_tmdbmovies_budget: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.budget'
    ),
    search_db_tmdbmovies_genres: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.genres'
    ),
    search_db_tmdbmovies_homepage: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.homepage'
    ),
    search_db_tmdbmovies_movie_id: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.movie_id'
    ),
    search_db_tmdbmovies_keywords: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.keywords'
    ),
    search_db_tmdbmovies_original_language: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.original_language'
    ),
    search_db_tmdbmovies_popularity: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.popularity'
    ),
    search_db_tmdbmovies_production_companies: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.production_companies'
    ),
    search_db_tmdbmovies_production_countries: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.production_countries'
    ),
    search_db_tmdbmovies_release_date: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.release_date'
    ),
    search_db_tmdbmovies_revenue: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.revenue'
    ),
    search_db_tmdbmovies_runtime: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.runtime'
    ),
    search_db_tmdbmovies_spoken_languages: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.spoken_languages'
    ),
    search_db_tmdbmovies_status: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.status'
    ),
    search_db_tmdbmovies_tagline: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.tagline'
    ),
    search_db_tmdbmovies_title: Optional[str] = Query(
        None, alias='search.db_tmdbmovies.title'
    ),
    search_db_tmdbmovies_vote_average: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.vote_average'
    ),
    search_db_tmdbmovies_vote_count: Optional[float] = Query(
        None, alias='search.db_tmdbmovies.vote_count'
    ),
):
    """
    Search API for 'Tmdb Movies' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/todo',
    description=""" API to search for entries of type Todo """,
    tags=['task_search_operations', 'general_api_search'],
)
def search_todo(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_todo_checked: Optional[bool] = Query(
        None, alias='search.db_todo.checked'
    ),
    search_db_todo_title: Optional[str] = Query(None, alias='search.db_todo.title'),
    search_db_todo_category: Optional[str] = Query(
        None, alias='search.db_todo.category'
    ),
):
    """
    Search API for 'Todo' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/trip_event',
    description=""" API to search for entries of type Event """,
    tags=['general_api_search', 'calendar_entry_search', 'event_data_search'],
)
def search_trip_event(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Event' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/trip_flight',
    description=""" API to search for entries of type Flight Leg """,
    tags=[
        'boulder_elections_data_search',
        'voting_process_data_search',
        'general_api_search',
    ],
)
def search_trip_flight(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Flight Leg' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/trip_hotel',
    description=""" API to search for entries of type Lodging """,
    tags=['boulder_services_search', 'general_api_search'],
)
def search_trip_hotel(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Lodging' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/trip_report',
    description=""" API to search for entries of type Trip Report """,
    tags=['trip_components_search', 'general_api_search', 'data_extraction'],
)
def search_trip_report(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Trip Report' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/trip_trip',
    description=""" API to search for entries of type Trip """,
    tags=['general_api_search', 'trip_components_search'],
)
def search_trip_trip(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Trip' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_awc_metar',
    description=""" API to search for entries of type AWC Weather Observations """,
    tags=['weather_data_search_operations', 'combined_weather_data_search'],
)
def search_type_awc_metar(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_awc_metar_site_id: Optional[str] = Query(
        None, alias='search.type_awc_metar.site_id'
    ),
):
    """
    Search API for 'AWC Weather Observations' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_biz_stockseries',
    description=""" API to search for entries of type Stock Ticker Data """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_biz_stockseries(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Stock Ticker Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_bls_series',
    description=""" API to search for entries of type BLS Series """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_bls_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_bls_series_survey_name: Optional[str] = Query(
        None, alias='search.type_bls_series.survey_name'
    ),
    search_type_bls_series_measure_data_type: Optional[str] = Query(
        None, alias='search.type_bls_series.measure_data_type'
    ),
    search_type_bls_series_industry: Optional[str] = Query(
        None, alias='search.type_bls_series.industry'
    ),
    search_type_bls_series_sector: Optional[str] = Query(
        None, alias='search.type_bls_series.sector'
    ),
    search_type_bls_series_area: Optional[str] = Query(
        None, alias='search.type_bls_series.area'
    ),
    search_type_bls_series_item: Optional[str] = Query(
        None, alias='search.type_bls_series.item'
    ),
    search_type_bls_series_seasonality: Optional[str] = Query(
        None, alias='search.type_bls_series.seasonality'
    ),
):
    """
    Search API for 'BLS Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_bls_survey',
    description=""" API to search for entries of type BLS Survey """,
    tags=['general_api_search', 'voting_process_data_search'],
)
def search_type_bls_survey(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'BLS Survey' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_census_acs',
    description=""" API to search for entries of type US Census ACS Data """,
    tags=['data_extraction', 'geographic_data_search', 'dataset_api_search'],
)
def search_type_census_acs(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_census_acs_fields: Optional[str] = Query(
        None, alias='search.type_census_acs.fields'
    ),
    search_type_census_acs_for_type: Optional[str] = Query(
        None, alias='search.type_census_acs.for_type'
    ),
    search_type_census_acs_in_type1: Optional[str] = Query(
        None, alias='search.type_census_acs.in_type1'
    ),
    search_type_census_acs_in_type2: Optional[str] = Query(
        None, alias='search.type_census_acs.in_type2'
    ),
):
    """
    Search API for 'US Census ACS Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_daymet',
    description=""" API to search for entries of type Daymet Daily Weather """,
    tags=[
        'weather_data_search_operations',
        'combined_weather_data_search',
        'general_api_search',
    ],
)
def search_type_daymet(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Daymet Daily Weather' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_db_table',
    description=""" API to search for entries of type Database Table """,
    tags=['data_extraction', 'document_api_search', 'general_api_search'],
)
def search_type_db_table(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Database Table' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_csv',
    description=""" API to search for entries of type CSV File """,
    tags=['file_search_operations', 'data_extraction'],
)
def search_type_document_csv(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'CSV File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_doc',
    description=""" API to search for entries of type Word File """,
    tags=['file_search_operations', 'document_api_search'],
)
def search_type_document_doc(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Word File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_html',
    description=""" API to search for entries of type HTML File """,
    tags=['file_search_operations', 'document_types_search', 'document_api_search'],
)
def search_type_document_html(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'HTML File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_pdf',
    description=""" API to search for entries of type PDF File """,
    tags=['file_search_operations', 'document_api_search'],
)
def search_type_document_pdf(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'PDF File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_ppt',
    description=""" API to search for entries of type Powerpoint File """,
    tags=['file_search_operations', 'document_types_search', 'document_api_search'],
)
def search_type_document_ppt(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Powerpoint File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_document_xls',
    description=""" API to search for entries of type Excel File """,
    tags=['file_search_operations', 'data_extraction', 'data_file_type_search'],
)
def search_type_document_xls(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Excel File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_drilsdown_casestudy',
    description=""" API to search for entries of type Drilsdown Case Study """,
    tags=['general_api_search', 'document_api_search', 'text_data_search'],
)
def search_type_drilsdown_casestudy(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Drilsdown Case Study' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_edgar_filing',
    description=""" API to search for entries of type SEC EDGAR Filing """,
    tags=['file_search_operations', 'document_api_search', 'general_api_search'],
)
def search_type_edgar_filing(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_edgar_filing_form_type: Optional[str] = Query(
        None, alias='search.type_edgar_filing.form_type'
    ),
    search_type_edgar_filing_company_name: Optional[str] = Query(
        None, alias='search.type_edgar_filing.company_name'
    ),
    search_type_edgar_filing_cik_number: Optional[str] = Query(
        None, alias='search.type_edgar_filing.cik_number'
    ),
    search_type_edgar_filing_standard_industrial_classification: Optional[str] = Query(
        None, alias='search.type_edgar_filing.standard_industrial_classification'
    ),
    search_type_edgar_filing_irs_number: Optional[str] = Query(
        None, alias='search.type_edgar_filing.irs_number'
    ),
    search_type_edgar_filing_state: Optional[str] = Query(
        None, alias='search.type_edgar_filing.state'
    ),
):
    """
    Search API for 'SEC EDGAR Filing' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_eia_category',
    description=""" API to search for entries of type EIA Category """,
    tags=['eia_data_search_apis', 'general_api_search'],
)
def search_type_eia_category(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'EIA Category' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_eia_series',
    description=""" API to search for entries of type EIA Series """,
    tags=['eia_data_search_apis', 'data_extraction', 'general_api_search'],
)
def search_type_eia_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'EIA Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_featureserver',
    description=""" API to search for entries of type ESRI Feature Server """,
    tags=['esri_feature_search', 'geospatial_records_search', 'data_extraction'],
)
def search_type_esri_featureserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Feature Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_geometryserver',
    description=""" API to search for entries of type ESRI Geometry Server """,
    tags=['geographic_data_search', 'esri_feature_search', 'geospatial_records_search'],
)
def search_type_esri_geometryserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Geometry Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_gpserver',
    description=""" API to search for entries of type ESRI GP Server """,
    tags=[
        'esri_feature_search',
        'geographic_data_search',
        'geospatial_records_search',
        'data_extraction',
        'dataset_api_search',
    ],
)
def search_type_esri_gpserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI GP Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_imageserver',
    description=""" API to search for entries of type ESRI Image Server """,
    tags=['geographic_data_search', 'esri_feature_search', 'general_api_search'],
)
def search_type_esri_imageserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Image Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_layer',
    description=""" API to search for entries of type ESRI Layer """,
    tags=['geographic_data_search', 'esri_feature_search', 'general_api_search'],
)
def search_type_esri_layer(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_esri_layer_layer_type: Optional[str] = Query(
        None, alias='search.type_esri_layer.layer_type'
    ),
):
    """
    Search API for 'ESRI Layer' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_mapserver',
    description=""" API to search for entries of type ESRI Map Server """,
    tags=['map_data_search', 'geographic_data_search', 'esri_feature_search'],
)
def search_type_esri_mapserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Map Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_restfolder',
    description=""" API to search for entries of type ESRI Services Folder """,
    tags=[
        'geographic_data_search',
        'group_types_search',
        'esri_feature_search',
        'general_api_search',
    ],
)
def search_type_esri_restfolder(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Services Folder' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_restserver',
    description=""" API to search for entries of type ESRI Web Server """,
    tags=['geo_file_search_operations', 'esri_feature_search', 'general_api_search'],
)
def search_type_esri_restserver(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Web Server' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_esri_restservice',
    description=""" API to search for entries of type ESRI Rest Service """,
    tags=['geographic_data_search', 'esri_feature_search', 'general_api_search'],
)
def search_type_esri_restservice(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ESRI Rest Service' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_extremes',
    description=""" API to search for entries of type NOAA Extremes Data """,
    tags=[
        'data_extraction',
        'weather_data_search_operations',
        'climate_environment_data_search',
        'dataset_api_search',
    ],
)
def search_type_extremes(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_extremes_region: Optional[str] = Query(
        None, alias='search.type_extremes.region'
    ),
    search_type_extremes_variable: Optional[str] = Query(
        None, alias='search.type_extremes.variable'
    ),
):
    """
    Search API for 'NOAA Extremes Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_fred_category',
    description=""" API to search for entries of type FRED Category """,
    tags=['federal_reserve_data_search', 'dataset_api_search', 'general_api_search'],
)
def search_type_fred_category(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FRED Category' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_fred_series',
    description=""" API to search for entries of type FRED Series """,
    tags=['dataset_api_search', 'federal_reserve_data_search', 'general_api_search'],
)
def search_type_fred_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FRED Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_agency',
    description=""" API to search for entries of type Transit Agency """,
    tags=['transit_data_search', 'data_extraction', 'general_api_search'],
)
def search_type_gtfs_agency(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Transit Agency' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_route',
    description=""" API to search for entries of type Transit Route """,
    tags=['transit_data_search', 'general_api_search'],
)
def search_type_gtfs_route(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_gtfs_route_route_id: Optional[str] = Query(
        None, alias='search.type_gtfs_route.route_id'
    ),
    search_type_gtfs_route_stop_names: Optional[str] = Query(
        None, alias='search.type_gtfs_route.stop_names'
    ),
):
    """
    Search API for 'Transit Route' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_routes',
    description=""" API to search for entries of type Transit Route Collection """,
    tags=['transit_data_search', 'general_api_search'],
)
def search_type_gtfs_routes(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Transit Route Collection' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_stop',
    description=""" API to search for entries of type Transit Stop """,
    tags=['transit_data_search'],
)
def search_type_gtfs_stop(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_gtfs_stop_stop_id: Optional[str] = Query(
        None, alias='search.type_gtfs_stop.stop_id'
    ),
    search_type_gtfs_stop_stop_code: Optional[str] = Query(
        None, alias='search.type_gtfs_stop.stop_code'
    ),
    search_type_gtfs_stop_zone_id: Optional[str] = Query(
        None, alias='search.type_gtfs_stop.zone_id'
    ),
    search_type_gtfs_stop_location_type: Optional[str] = Query(
        None, alias='search.type_gtfs_stop.location_type'
    ),
    search_type_gtfs_stop_wheelchair_boarding: Optional[str] = Query(
        None, alias='search.type_gtfs_stop.wheelchair_boarding'
    ),
):
    """
    Search API for 'Transit Stop' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_stops',
    description=""" API to search for entries of type Transit Stop Collection """,
    tags=['transit_data_search', 'general_api_search'],
)
def search_type_gtfs_stops(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Transit Stop Collection' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_gtfs_trip',
    description=""" API to search for entries of type Transit Trip """,
    tags=['transit_data_search', 'general_api_search'],
)
def search_type_gtfs_trip(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_gtfs_trip_trip_id: Optional[str] = Query(
        None, alias='search.type_gtfs_trip.trip_id'
    ),
    search_type_gtfs_trip_stop_ids: Optional[str] = Query(
        None, alias='search.type_gtfs_trip.stop_ids'
    ),
    search_type_gtfs_trip_wheelchair_accessible: Optional[str] = Query(
        None, alias='search.type_gtfs_trip.wheelchair_accessible'
    ),
    search_type_gtfs_trip_bikes_allowed: Optional[str] = Query(
        None, alias='search.type_gtfs_trip.bikes_allowed'
    ),
):
    """
    Search API for 'Transit Trip' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_hazarddata',
    description=""" API to search for entries of type Hazard Data """,
    tags=['hazard_data_search', 'data_extraction', 'general_api_search'],
)
def search_type_hazarddata(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_hazarddata_source: Optional[str] = Query(
        None, alias='search.type_hazarddata.source'
    ),
):
    """
    Search API for 'Hazard Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_hydro_colorado',
    description=""" API to search for entries of type Colorado DNR Stream Gage """,
    tags=[
        'data_extraction',
        'geographic_data_search',
        'hydrography_data_search',
        'general_api_search',
    ],
)
def search_type_hydro_colorado(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_hydro_colorado_site_id: Optional[str] = Query(
        None, alias='search.type_hydro_colorado.site_id'
    ),
):
    """
    Search API for 'Colorado DNR Stream Gage' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_idv_bundle',
    description=""" API to search for entries of type IDV Bundle """,
    tags=['idv_bundle_data_search', 'general_api_search'],
)
def search_type_idv_bundle(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'IDV Bundle' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_image',
    description=""" API to search for entries of type Image """,
    tags=[
        'file_search_operations',
        'general_image_search',
        'media_item_search_operations',
        'general_api_search',
    ],
)
def search_type_image(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Image' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_image_airport',
    description=""" API to search for entries of type Airport Image """,
    tags=[
        'media_item_search_operations',
        'general_image_search',
        'geographic_data_search',
    ],
)
def search_type_image_airport(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Airport Image' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_image_webcam',
    description=""" API to search for entries of type Webcam """,
    tags=['general_api_search', 'data_extraction', 'media_item_search_operations'],
)
def search_type_image_webcam(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Webcam' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_mb',
    description=""" API to search for entries of type MB Bathymetry """,
    tags=[
        'bathymetry_data_search',
        'general_api_search',
        'data_extraction',
        'geographic_data_search',
    ],
)
def search_type_mb(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'MB Bathymetry' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_mb_collection',
    description=""" API to search for entries of type Bathymetry Collection """,
    tags=['bathymetry_data_search', 'geographic_data_search'],
)
def search_type_mb_collection(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Bathymetry Collection' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_mb_point_basic',
    description=""" API to search for entries of type Basic MB point file """,
    tags=[
        'file_search_operations',
        'data_extraction',
        'document_api_search',
        'general_api_search',
    ],
)
def search_type_mb_point_basic(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Basic MB point file' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_metameta_dictionary',
    description=""" API to search for entries of type Metadata Dictionary """,
    tags=['metadata_entries_search', 'general_api_search'],
)
def search_type_metameta_dictionary(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_metameta_dictionary_field_index: Optional[int] = Query(
        None, alias='search.type_metameta_dictionary.field_index'
    ),
    search_type_metameta_dictionary_dictionary_type: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.dictionary_type'
    ),
    search_type_metameta_dictionary_short_name: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.short_name'
    ),
    search_type_metameta_dictionary_super_type: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.super_type'
    ),
    search_type_metameta_dictionary_isgroup: Optional[bool] = Query(
        None, alias='search.type_metameta_dictionary.isgroup'
    ),
    search_type_metameta_dictionary_handler_class: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.handler_class'
    ),
    search_type_metameta_dictionary_properties: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.properties'
    ),
    search_type_metameta_dictionary_wiki_text: Optional[str] = Query(
        None, alias='search.type_metameta_dictionary.wiki_text'
    ),
):
    """
    Search API for 'Metadata Dictionary' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_metameta_field',
    description=""" API to search for entries of type Metadata Field """,
    tags=['metadata_entries_search', 'general_api_search'],
)
def search_type_metameta_field(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_metameta_field_field_index: Optional[int] = Query(
        None, alias='search.type_metameta_field.field_index'
    ),
    search_type_metameta_field_field_id: Optional[str] = Query(
        None, alias='search.type_metameta_field.field_id'
    ),
    search_type_metameta_field_datatype: Optional[str] = Query(
        None, alias='search.type_metameta_field.datatype'
    ),
    search_type_metameta_field_enumeration_values: Optional[str] = Query(
        None, alias='search.type_metameta_field.enumeration_values'
    ),
    search_type_metameta_field_properties: Optional[str] = Query(
        None, alias='search.type_metameta_field.properties'
    ),
    search_type_metameta_field_database_column_size: Optional[int] = Query(
        None, alias='search.type_metameta_field.database_column_size'
    ),
    search_type_metameta_field_missing: Optional[str] = Query(
        None, alias='search.type_metameta_field.missing'
    ),
    search_type_metameta_field_unit: Optional[str] = Query(
        None, alias='search.type_metameta_field.unit'
    ),
):
    """
    Search API for 'Metadata Field' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_nasaames',
    description=""" API to search for entries of type NASA AMES File """,
    tags=['nasa_data_search', 'data_extraction', 'general_api_search'],
)
def search_type_nasaames(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NASA AMES File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_ncss',
    description=""" API to search for entries of type NetCDF Point Subset """,
    tags=[
        'geo_file_search_operations',
        'dataset_api_search',
        'point_data_search_apis',
        'general_api_search',
    ],
)
def search_type_ncss(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NetCDF Point Subset' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_nitf',
    description=""" API to search for entries of type NITF File """,
    tags=['file_search_operations', 'general_api_search'],
)
def search_type_nitf(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NITF File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ameriflux_level2',
    description=""" API to search for entries of type Ameriflux Level 2 CSV File """,
    tags=[
        'data_extraction',
        'file_search_operations',
        'climate_environment_data_search',
    ],
)
def search_type_point_ameriflux_level2(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_ameriflux_level2_site_id: Optional[str] = Query(
        None, alias='search.type_point_ameriflux_level2.site_id'
    ),
    search_type_point_ameriflux_level2_contact: Optional[str] = Query(
        None, alias='search.type_point_ameriflux_level2.contact'
    ),
    search_type_point_ameriflux_level2_ecosystem_type: Optional[str] = Query(
        None, alias='search.type_point_ameriflux_level2.ecosystem_type'
    ),
):
    """
    Search API for 'Ameriflux Level 2 CSV File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_amrc_final',
    description=""" API to search for entries of type AMRC Final QC Data """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_point_amrc_final(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_amrc_final_site_id: Optional[str] = Query(
        None, alias='search.type_point_amrc_final.site_id'
    ),
    search_type_point_amrc_final_site_name: Optional[str] = Query(
        None, alias='search.type_point_amrc_final.site_name'
    ),
    search_type_point_amrc_final_argos_id: Optional[str] = Query(
        None, alias='search.type_point_amrc_final.argos_id'
    ),
):
    """
    Search API for 'AMRC Final QC Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_amrc_freewave',
    description=""" API to search for entries of type AMRC Freewave  Data """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_point_amrc_freewave(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_amrc_freewave_station_name: Optional[str] = Query(
        None, alias='search.type_point_amrc_freewave.station_name'
    ),
    search_type_point_amrc_freewave_format: Optional[str] = Query(
        None, alias='search.type_point_amrc_freewave.format'
    ),
    search_type_point_amrc_freewave_datalogger_model: Optional[str] = Query(
        None, alias='search.type_point_amrc_freewave.datalogger_model'
    ),
    search_type_point_amrc_freewave_datalogger_serial: Optional[str] = Query(
        None, alias='search.type_point_amrc_freewave.datalogger_serial'
    ),
):
    """
    Search API for 'AMRC Freewave  Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_czo',
    description=""" API to search for entries of type CZO Display File Format """,
    tags=['data_extraction', 'file_search_operations'],
)
def search_type_point_czo(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'CZO Display File Format' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_gcnet',
    description=""" API to search for entries of type GC-Net Point Data """,
    tags=['point_data_search_apis', 'geospatial_records_search', 'general_api_search'],
)
def search_type_point_gcnet(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'GC-Net Point Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_geomag_iaga2002',
    description=""" API to search for entries of type IAGA 2002 Geomagnetism Data """,
    tags=['geographic_data_search', 'data_file_type_search', 'dataset_api_search'],
)
def search_type_point_geomag_iaga2002(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_geomag_iaga2002_iaga_code: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.iaga_code'
    ),
    search_type_point_geomag_iaga2002_station_name: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.station_name'
    ),
    search_type_point_geomag_iaga2002_source_of_data: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.source_of_data'
    ),
    search_type_point_geomag_iaga2002_digital_sampling: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.digital_sampling'
    ),
    search_type_point_geomag_iaga2002_data_interval: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.data_interval'
    ),
    search_type_point_geomag_iaga2002_data_type: Optional[str] = Query(
        None, alias='search.type_point_geomag_iaga2002.data_type'
    ),
):
    """
    Search API for 'IAGA 2002 Geomagnetism Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_hydro_waterml',
    description=""" API to search for entries of type WaterML """,
    tags=[
        'geographic_data_search',
        'hydrological_data_search',
        'dataset_api_search',
        'general_api_search',
    ],
)
def search_type_point_hydro_waterml(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_hydro_waterml_site_code: Optional[str] = Query(
        None, alias='search.type_point_hydro_waterml.site_code'
    ),
    search_type_point_hydro_waterml_site_name: Optional[str] = Query(
        None, alias='search.type_point_hydro_waterml.site_name'
    ),
):
    """
    Search API for 'WaterML' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_icebridge_atm_icessn',
    description=""" API to search for entries of type ATM Ice SSN Data """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_point_icebridge_atm_icessn(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ATM Ice SSN Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_icebridge_atm_qfit',
    description=""" API to search for entries of type ATM QFIT Data """,
    tags=['data_extraction', 'data_file_type_search', 'general_api_search'],
)
def search_type_point_icebridge_atm_qfit(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'ATM QFIT Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_icebridge_mccords_irmcr2',
    description=""" API to search for entries of type McCords Irmcr2 Data """,
    tags=['general_api_search'],
)
def search_type_point_icebridge_mccords_irmcr2(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'McCords Irmcr2 Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_icebridge_mccords_irmcr3',
    description=""" API to search for entries of type McCords Irmcr3 Data """,
    tags=['general_api_search'],
)
def search_type_point_icebridge_mccords_irmcr3(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'McCords Irmcr3 Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_icebridge_paris',
    description=""" API to search for entries of type Paris Data """,
    tags=['general_api_search', 'data_extraction', 'location_information_search'],
)
def search_type_point_icebridge_paris(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Paris Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_idv',
    description=""" API to search for entries of type IDV Point File """,
    tags=['file_search_operations', 'general_api_search', 'idv_bundle_data_search'],
)
def search_type_point_idv(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'IDV Point File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_inline',
    description=""" API to search for entries of type Inline Point File """,
    tags=['file_search_operations', 'data_extraction', 'general_api_search'],
)
def search_type_point_inline(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Inline Point File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ncdc_climate',
    description=""" API to search for entries of type NC  DC Climate Data """,
    tags=['climate_environment_data_search', 'general_api_search'],
)
def search_type_point_ncdc_climate(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NC  DC Climate Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_netcdf',
    description=""" API to search for entries of type NetCDF Point File """,
    tags=[
        'data_extraction',
        'geo_file_search_operations',
        'point_data_search_apis',
        'geospatial_records_search',
    ],
)
def search_type_point_netcdf(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NetCDF Point File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_noaa_carbon',
    description=""" API to search for entries of type NOAA Carbon Measurements """,
    tags=['data_extraction', 'climate_environment_data_search', 'general_api_search'],
)
def search_type_point_noaa_carbon(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_noaa_carbon_site_id: Optional[str] = Query(
        None, alias='search.type_point_noaa_carbon.site_id'
    ),
    search_type_point_noaa_carbon_parameter: Optional[str] = Query(
        None, alias='search.type_point_noaa_carbon.parameter'
    ),
    search_type_point_noaa_carbon_project: Optional[str] = Query(
        None, alias='search.type_point_noaa_carbon.project'
    ),
    search_type_point_noaa_carbon_lab_id_number: Optional[str] = Query(
        None, alias='search.type_point_noaa_carbon.lab_id_number'
    ),
    search_type_point_noaa_carbon_measurement_group: Optional[str] = Query(
        None, alias='search.type_point_noaa_carbon.measurement_group'
    ),
):
    """
    Search API for 'NOAA Carbon Measurements' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_noaa_flask_event',
    description=""" API to search for entries of type NOAA Flask Event Measurements """,
    tags=[
        'weather_data_search_operations',
        'climate_environment_data_search',
        'dataset_api_search',
        'general_api_search',
    ],
)
def search_type_point_noaa_flask_event(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_noaa_flask_event_site_id: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_event.site_id'
    ),
    search_type_point_noaa_flask_event_parameter: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_event.parameter'
    ),
    search_type_point_noaa_flask_event_project: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_event.project'
    ),
    search_type_point_noaa_flask_event_lab_id_number: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_event.lab_id_number'
    ),
    search_type_point_noaa_flask_event_measurement_group: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_event.measurement_group'
    ),
):
    """
    Search API for 'NOAA Flask Event Measurements' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_noaa_flask_month',
    description=""" API to search for entries of type NOAA Flask Month Measurements """,
    tags=[
        'data_extraction',
        'weather_data_search_operations',
        'climate_environment_data_search',
    ],
)
def search_type_point_noaa_flask_month(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_noaa_flask_month_site_id: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_month.site_id'
    ),
    search_type_point_noaa_flask_month_parameter: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_month.parameter'
    ),
    search_type_point_noaa_flask_month_project: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_month.project'
    ),
    search_type_point_noaa_flask_month_lab_id_number: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_month.lab_id_number'
    ),
    search_type_point_noaa_flask_month_measurement_group: Optional[str] = Query(
        None, alias='search.type_point_noaa_flask_month.measurement_group'
    ),
):
    """
    Search API for 'NOAA Flask Month Measurements' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_noaa_madis',
    description=""" API to search for entries of type NOAA MADIS Point Data """,
    tags=[
        'data_extraction',
        'geographic_data_search',
        'point_data_search_apis',
        'dataset_api_search',
    ],
)
def search_type_point_noaa_madis(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NOAA MADIS Point Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_noaa_tower',
    description=""" API to search for entries of type NOAA Tower Network """,
    tags=[
        'general_api_search',
        'geospatial_records_search',
        'weather_data_search_operations',
    ],
)
def search_type_point_noaa_tower(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_noaa_tower_site_id: Optional[str] = Query(
        None, alias='search.type_point_noaa_tower.site_id'
    ),
):
    """
    Search API for 'NOAA Tower Network' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_cnv',
    description=""" API to search for entries of type SeaBird CNV Data """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_point_ocean_cnv(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SeaBird CNV Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_csv_sado_TTS',
    description=""" API to search for entries of type SADO TTS Data """,
    tags=['data_extraction', 'text_data_search', 'general_api_search'],
)
def search_type_point_ocean_csv_sado__t_t_s(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SADO TTS Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_csv_sado_meteo',
    description=""" API to search for entries of type SADO Meteo Data """,
    tags=[
        'weather_data_search_operations',
        'data_extraction',
        'combined_weather_data_search',
    ],
)
def search_type_point_ocean_csv_sado_meteo(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SADO Meteo Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_csv_sado_position',
    description=""" API to search for entries of type SADO Position Data """,
    tags=[
        'boulder_elections_data_search',
        'voting_process_data_search',
        'data_extraction',
    ],
)
def search_type_point_ocean_csv_sado_position(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SADO Position Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_netcdf_glider',
    description=""" API to search for entries of type NetCDF Glider Data """,
    tags=[
        'data_extraction',
        'geographic_data_search',
        'dataset_api_search',
        'geospatial_records_search',
    ],
)
def search_type_point_ocean_netcdf_glider(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_ocean_netcdf_track_platform: Optional[str] = Query(
        None, alias='search.type_point_ocean_netcdf_track.platform'
    ),
):
    """
    Search API for 'NetCDF Glider Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_netcdf_track',
    description=""" API to search for entries of type NetCDF Track Data """,
    tags=[
        'data_extraction',
        'geo_file_search_operations',
        'dataset_api_search',
        'geospatial_records_search',
    ],
)
def search_type_point_ocean_netcdf_track(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_ocean_netcdf_track_platform: Optional[str] = Query(
        None, alias='search.type_point_ocean_netcdf_track.platform'
    ),
):
    """
    Search API for 'NetCDF Track Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_ocean_ooi_dmgx',
    description=""" API to search for entries of type OOI Data """,
    tags=['general_api_search', 'data_extraction'],
)
def search_type_point_ocean_ooi_dmgx(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'OOI Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_openaq',
    description=""" API to search for entries of type Open AQ Air Quality """,
    tags=['general_api_search', 'data_extraction', 'geospatial_records_search'],
)
def search_type_point_openaq(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_openaq_location: Optional[str] = Query(
        None, alias='search.type_point_openaq.location'
    ),
    search_type_point_openaq_country: Optional[str] = Query(
        None, alias='search.type_point_openaq.country'
    ),
    search_type_point_openaq_city: Optional[str] = Query(
        None, alias='search.type_point_openaq.city'
    ),
    search_type_point_openaq_hours_offset: Optional[int] = Query(
        None, alias='search.type_point_openaq.hours_offset'
    ),
):
    """
    Search API for 'Open AQ Air Quality' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_pbo_position_time_series',
    description=""" API to search for entries of type PBO Position Time Series """,
    tags=['data_extraction', 'text_data_search', 'general_api_search'],
)
def search_type_point_pbo_position_time_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_pbo_position_time_series_four_char_id: Optional[str] = Query(
        None, alias='search.type_point_pbo_position_time_series.four_char_id'
    ),
    search_type_point_pbo_position_time_series_station_name: Optional[str] = Query(
        None, alias='search.type_point_pbo_position_time_series.station_name'
    ),
    search_type_point_pbo_position_time_series_reference_frame: Optional[str] = Query(
        None, alias='search.type_point_pbo_position_time_series.reference_frame'
    ),
    search_type_point_pbo_position_time_series_format_version: Optional[str] = Query(
        None, alias='search.type_point_pbo_position_time_series.format_version'
    ),
    search_type_point_pbo_position_time_series_processing_center: Optional[str] = Query(
        None, alias='search.type_point_pbo_position_time_series.processing_center'
    ),
):
    """
    Search API for 'PBO Position Time Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_simple_records',
    description=""" API to search for entries of type Simple Records """,
    tags=['service_records_search', 'general_api_search'],
)
def search_type_point_simple_records(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Simple Records' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_snotel',
    description=""" API to search for entries of type SNOTEL Snow Data """,
    tags=[
        'data_extraction',
        'geographic_data_search',
        'weather_data_search_operations',
        'general_api_search',
    ],
)
def search_type_point_snotel(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_snotel_site_id: Optional[str] = Query(
        None, alias='search.type_point_snotel.site_id'
    ),
    search_type_point_snotel_site_number: Optional[str] = Query(
        None, alias='search.type_point_snotel.site_number'
    ),
    search_type_point_snotel_state: Optional[str] = Query(
        None, alias='search.type_point_snotel.state'
    ),
    search_type_point_snotel_network: Optional[str] = Query(
        None, alias='search.type_point_snotel.network'
    ),
    search_type_point_snotel_huc_name: Optional[str] = Query(
        None, alias='search.type_point_snotel.huc_name'
    ),
    search_type_point_snotel_huc_id: Optional[str] = Query(
        None, alias='search.type_point_snotel.huc_id'
    ),
):
    """
    Search API for 'SNOTEL Snow Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_text',
    description=""" API to search for entries of type Record Text File """,
    tags=['file_search_operations', 'text_data_search', 'general_api_search'],
)
def search_type_point_text(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Record Text File' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_point_wsbb_ggp',
    description=""" API to search for entries of type Global Geodynamics GGP Format """,
    tags=['data_extraction', 'geographic_data_search', 'general_api_search'],
)
def search_type_point_wsbb_ggp(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_point_wsbb_ggp_station: Optional[str] = Query(
        None, alias='search.type_point_wsbb_ggp.station'
    ),
    search_type_point_wsbb_ggp_instrument: Optional[str] = Query(
        None, alias='search.type_point_wsbb_ggp.instrument'
    ),
    search_type_point_wsbb_ggp_author: Optional[str] = Query(
        None, alias='search.type_point_wsbb_ggp.author'
    ),
):
    """
    Search API for 'Global Geodynamics GGP Format' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_psd_monthly_climate_index',
    description=""" API to search for entries of type NOAA-ESRL-PSD Monthly Climate Index """,
    tags=['climate_environment_data_search', 'data_extraction', 'general_api_search'],
)
def search_type_psd_monthly_climate_index(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_type_psd_monthly_climate_index_units: Optional[str] = Query(
        None, alias='search.type_psd_monthly_climate_index.units'
    ),
):
    """
    Search API for 'NOAA-ESRL-PSD Monthly Climate Index' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_quandl_series',
    description=""" API to search for entries of type QUANDL Series """,
    tags=['general_api_search', 'dataset_api_search', 'data_extraction'],
)
def search_type_quandl_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'QUANDL Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_service_group',
    description=""" API to search for entries of type Service Group """,
    tags=['service_records_search', 'general_api_search'],
)
def search_type_service_group(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Service Group' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_service_link',
    description=""" API to search for entries of type Service Link """,
    tags=['service_records_search', 'general_api_search', 'boulder_services_search'],
)
def search_type_service_link(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Service Link' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_socrata_series',
    description=""" API to search for entries of type SOCRATA Series """,
    tags=['data_extraction', 'general_api_search'],
)
def search_type_socrata_series(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'SOCRATA Series' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_sounding_cod',
    description=""" API to search for entries of type COD Sounding """,
    tags=['sounding_data_entries_search', 'data_extraction', 'general_api_search'],
)
def search_type_sounding_cod(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'COD Sounding' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_sounding_frd',
    description=""" API to search for entries of type FRD Sounding """,
    tags=['sounding_data_entries_search', 'general_api_search'],
)
def search_type_sounding_frd(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'FRD Sounding' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_sounding_gsd',
    description=""" API to search for entries of type GSD Sounding """,
    tags=['sounding_data_entries_search', 'data_extraction', 'general_api_search'],
)
def search_type_sounding_gsd(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'GSD Sounding' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_sounding_wyoming',
    description=""" API to search for entries of type UW Sounding """,
    tags=['sounding_data_entries_search', 'general_api_search'],
)
def search_type_sounding_wyoming(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'UW Sounding' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_tmy',
    description=""" API to search for entries of type NREL TMY Data """,
    tags=['data_extraction', 'general_api_search', 'climate_environment_data_search'],
)
def search_type_tmy(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'NREL TMY Data' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_tweet',
    description=""" API to search for entries of type Tweet """,
    tags=['social_media_content_search', 'general_api_search', 'text_data_search'],
)
def search_type_tweet(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Tweet' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_usgs_gauge',
    description=""" API to search for entries of type USGS Stream Gauge """,
    tags=[
        'geographic_data_search',
        'hydrological_data_search',
        'dataset_api_search',
        'general_api_search',
    ],
)
def search_type_usgs_gauge(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'USGS Stream Gauge' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_virtual',
    description=""" API to search for entries of type Virtual Group """,
    tags=['group_types_search', 'general_api_search'],
)
def search_type_virtual(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Virtual Group' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_wms_capabilities',
    description=""" API to search for entries of type WMS Capabilities """,
    tags=['general_api_search', 'geographic_data_search', 'data_extraction'],
)
def search_type_wms_capabilities(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'WMS Capabilities' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/type_wms_layer',
    description=""" API to search for entries of type WMS Layer """,
    tags=['geospatial_records_search', 'general_api_search', 'data_extraction'],
)
def search_type_wms_layer(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'WMS Layer' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/ufo_sightings',
    description=""" API to search for entries of type Ufo Sightings """,
    tags=['data_extraction', 'text_data_search', 'general_api_search'],
)
def search_ufo_sightings(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_ufo_sightings_datetime: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.datetime'
    ),
    search_db_ufo_sightings_city: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.city'
    ),
    search_db_ufo_sightings_state: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.state'
    ),
    search_db_ufo_sightings_country: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.country'
    ),
    search_db_ufo_sightings_shape: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.shape'
    ),
    search_db_ufo_sightings_duration_seconds: Optional[float] = Query(
        None, alias='search.db_ufo_sightings.duration_seconds'
    ),
    search_db_ufo_sightings_duration_hours_min: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.duration_hours_min'
    ),
    search_db_ufo_sightings_comments: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.comments'
    ),
    search_db_ufo_sightings_date_posted: Optional[str] = Query(
        None, alias='search.db_ufo_sightings.date_posted'
    ),
    search_db_ufo_sightings_latitude: Optional[float] = Query(
        None, alias='search.db_ufo_sightings.latitude'
    ),
    search_db_ufo_sightings_longitude: Optional[float] = Query(
        None, alias='search.db_ufo_sightings.longitude'
    ),
):
    """
    Search API for 'Ufo Sightings' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/us_places',
    description=""" API to search for entries of type US Places """,
    tags=['geographic_data_search', 'location_information_search', 'data_extraction'],
)
def search_us_places(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_us_places_feature_name: Optional[str] = Query(
        None, alias='search.db_us_places.feature_name'
    ),
    search_db_us_places_feature_class: Optional[str] = Query(
        None, alias='search.db_us_places.feature_class'
    ),
    search_db_us_places_state_alpha: Optional[str] = Query(
        None, alias='search.db_us_places.state_alpha'
    ),
    search_db_us_places_county_name: Optional[str] = Query(
        None, alias='search.db_us_places.county_name'
    ),
    search_db_us_places_location: Optional[str] = Query(
        None, alias='search.db_us_places.location'
    ),
    search_db_us_places_elev_in_ft: Optional[float] = Query(
        None, alias='search.db_us_places.elev_in_ft'
    ),
):
    """
    Search API for 'US Places' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/vote_yesno',
    description=""" API to search for entries of type Simple Yes-No Vote """,
    tags=['boulder_elections_data_search', 'voting_process_data_search'],
)
def search_vote_yesno(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_db_vote_yesno_vote: Optional[str] = Query(
        None, alias='search.db_vote_yesno.vote'
    ),
):
    """
    Search API for 'Simple Yes-No Vote' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/weblog',
    description=""" API to search for entries of type Weblog """,
    tags=['general_api_search', 'text_data_search'],
)
def search_weblog(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
):
    """
    Search API for 'Weblog' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/repository/search/type/wikipage',
    description=""" API to search for entries of type Wiki Page """,
    tags=['wiki_page_entries_search', 'general_api_search'],
)
def search_wikipage(
    text: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    fromdate: Optional[datetime] = None,
    todate: Optional[datetime] = None,
    createdate_from: Optional[datetime] = Query(None, alias='createdate.from'),
    createdate_to: Optional[datetime] = Query(None, alias='createdate.to'),
    changedate_from: Optional[datetime] = Query(None, alias='changedate.from'),
    changedate_to: Optional[datetime] = Query(None, alias='changedate.to'),
    group: Optional[str] = None,
    filesuffix: Optional[str] = None,
    maxlatitude: Optional[float] = None,
    minlongitude: Optional[float] = None,
    minlatitude: Optional[float] = None,
    maxlongitude: Optional[float] = None,
    max: Optional[int] = None,
    skip: Optional[int] = None,
    search_wikipage_wikitext: Optional[str] = Query(
        None, alias='search.wikipage.wikitext'
    ),
    search_wikipage_category: Optional[str] = Query(
        None, alias='search.wikipage.category'
    ),
):
    """
    Search API for 'Wiki Page' entry type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
